(self.webpackChunksleact_ts_front=self.webpackChunksleact_ts_front||[]).push([[233],{9713:e=>{e.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}},5354:e=>{e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},8517:(e,t,r)=>{"use strict";r.d(t,{Z:()=>V});var n=r(9713),a=r.n(n),i=r(7294);const o=function(e){var t={};return function(r){return void 0===t[r]&&(t[r]=e(r)),t[r]}};var c=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const s=o((function(e){return c.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));r(5354);var u=function(){function e(e){this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.before=null}var t=e.prototype;return t.insert=function(e){if(this.ctr%(this.isSpeedy?65e3:1)==0){var t,r=function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t}(this);t=0===this.tags.length?this.before:this.tags[this.tags.length-1].nextSibling,this.container.insertBefore(r,t),this.tags.push(r)}var n=this.tags[this.tags.length-1];if(this.isSpeedy){var a=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(n);try{var i=105===e.charCodeAt(1)&&64===e.charCodeAt(0);a.insertRule(e,i?0:a.cssRules.length)}catch(e){}}else n.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}();const l=function(e){function t(e,n,s,u,d){for(var h,p,v,g,w,C=0,x=0,A=0,O=0,_=0,j=0,I=v=h=0,M=0,D=0,N=0,V=0,W=s.length,$=W-1,H="",F="",G="",K="";M<W;){if(p=s.charCodeAt(M),M===$&&0!==x+O+A+C&&(0!==x&&(p=47===x?10:47),O=A=C=0,W++,$++),0===x+O+A+C){if(M===$&&(0<D&&(H=H.replace(f,"")),0<H.trim().length)){switch(p){case 32:case 9:case 59:case 13:case 10:break;default:H+=s.charAt(M)}p=59}switch(p){case 123:for(h=(H=H.trim()).charCodeAt(0),v=1,V=++M;M<W;){switch(p=s.charCodeAt(M)){case 123:v++;break;case 125:v--;break;case 47:switch(p=s.charCodeAt(M+1)){case 42:case 47:e:{for(I=M+1;I<$;++I)switch(s.charCodeAt(I)){case 47:if(42===p&&42===s.charCodeAt(I-1)&&M+2!==I){M=I+1;break e}break;case 10:if(47===p){M=I+1;break e}}M=I}}break;case 91:p++;case 40:p++;case 34:case 39:for(;M++<$&&s.charCodeAt(M)!==p;);}if(0===v)break;M++}switch(v=s.substring(V,M),0===h&&(h=(H=H.replace(l,"").trim()).charCodeAt(0)),h){case 64:switch(0<D&&(H=H.replace(f,"")),p=H.charCodeAt(1)){case 100:case 109:case 115:case 45:D=n;break;default:D=T}if(V=(v=t(n,D,v,p,d+1)).length,0<z&&(w=c(3,v,D=r(T,H,N),n,P,S,V,p,d,u),H=D.join(""),void 0!==w&&0===(V=(v=w.trim()).length)&&(p=0,v="")),0<V)switch(p){case 115:H=H.replace(k,o);case 100:case 109:case 45:v=H+"{"+v+"}";break;case 107:v=(H=H.replace(y,"$1 $2"))+"{"+v+"}",v=1===E||2===E&&i("@"+v,3)?"@-webkit-"+v+"@"+v:"@"+v;break;default:v=H+v,112===u&&(F+=v,v="")}else v="";break;default:v=t(n,r(n,H,N),v,u,d+1)}G+=v,v=N=D=I=h=0,H="",p=s.charCodeAt(++M);break;case 125:case 59:if(1<(V=(H=(0<D?H.replace(f,""):H).trim()).length))switch(0===I&&(h=H.charCodeAt(0),45===h||96<h&&123>h)&&(V=(H=H.replace(" ",":")).length),0<z&&void 0!==(w=c(1,H,n,e,P,S,F.length,u,d,u))&&0===(V=(H=w.trim()).length)&&(H="\0\0"),h=H.charCodeAt(0),p=H.charCodeAt(1),h){case 0:break;case 64:if(105===p||99===p){K+=H+s.charAt(M);break}default:58!==H.charCodeAt(V-1)&&(F+=a(H,h,p,H.charCodeAt(2)))}N=D=I=h=0,H="",p=s.charCodeAt(++M)}}switch(p){case 13:case 10:47===x?x=0:0===1+h&&107!==u&&0<H.length&&(D=1,H+="\0"),0<z*L&&c(0,H,n,e,P,S,F.length,u,d,u),S=1,P++;break;case 59:case 125:if(0===x+O+A+C){S++;break}default:switch(S++,g=s.charAt(M),p){case 9:case 32:if(0===O+C+x)switch(_){case 44:case 58:case 9:case 32:g="";break;default:32!==p&&(g=" ")}break;case 0:g="\\0";break;case 12:g="\\f";break;case 11:g="\\v";break;case 38:0===O+x+C&&(D=N=1,g="\f"+g);break;case 108:if(0===O+x+C+R&&0<I)switch(M-I){case 2:112===_&&58===s.charCodeAt(M-3)&&(R=_);case 8:111===j&&(R=j)}break;case 58:0===O+x+C&&(I=M);break;case 44:0===x+A+O+C&&(D=1,g+="\r");break;case 34:case 39:0===x&&(O=O===p?0:0===O?p:O);break;case 91:0===O+x+A&&C++;break;case 93:0===O+x+A&&C--;break;case 41:0===O+x+C&&A--;break;case 40:if(0===O+x+C){if(0===h)switch(2*_+3*j){case 533:break;default:h=1}A++}break;case 64:0===x+A+O+C+I+v&&(v=1);break;case 42:case 47:if(!(0<O+C+A))switch(x){case 0:switch(2*p+3*s.charCodeAt(M+1)){case 235:x=47;break;case 220:V=M,x=42}break;case 42:47===p&&42===_&&V+2!==M&&(33===s.charCodeAt(V+2)&&(F+=s.substring(V,M+1)),g="",x=0)}}0===x&&(H+=g)}j=_,_=p,M++}if(0<(V=F.length)){if(D=n,0<z&&void 0!==(w=c(2,F,D,e,P,S,V,u,d,u))&&0===(F=w).length)return K+F+G;if(F=D.join(",")+"{"+F+"}",0!=E*R){switch(2!==E||i(F,2)||(R=0),R){case 111:F=F.replace(b,":-moz-$1")+F;break;case 112:F=F.replace(m,"::-webkit-input-$1")+F.replace(m,"::-moz-$1")+F.replace(m,":-ms-input-$1")+F}R=0}}return K+F+G}function r(e,t,r){var a=t.trim().split(v);t=a;var i=a.length,o=e.length;switch(o){case 0:case 1:var c=0;for(e=0===o?"":e[0]+" ";c<i;++c)t[c]=n(e,t[c],r).trim();break;default:var s=c=0;for(t=[];c<i;++c)for(var u=0;u<o;++u)t[s++]=n(e[u]+" ",a[c],r).trim()}return t}function n(e,t,r){var n=t.charCodeAt(0);switch(33>n&&(n=(t=t.trim()).charCodeAt(0)),n){case 38:return t.replace(g,"$1"+e.trim());case 58:return e.trim()+t.replace(g,"$1"+e.trim());default:if(0<1*r&&0<t.indexOf("\f"))return t.replace(g,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function a(e,t,r,n){var o=e+";",c=2*t+3*r+4*n;if(944===c){e=o.indexOf(":",9)+1;var s=o.substring(e,o.length-1).trim();return s=o.substring(0,e).trim()+s+";",1===E||2===E&&i(s,1)?"-webkit-"+s+s:s}if(0===E||2===E&&!i(o,1))return o;switch(c){case 1015:return 97===o.charCodeAt(10)?"-webkit-"+o+o:o;case 951:return 116===o.charCodeAt(3)?"-webkit-"+o+o:o;case 963:return 110===o.charCodeAt(5)?"-webkit-"+o+o:o;case 1009:if(100!==o.charCodeAt(4))break;case 969:case 942:return"-webkit-"+o+o;case 978:return"-webkit-"+o+"-moz-"+o+o;case 1019:case 983:return"-webkit-"+o+"-moz-"+o+"-ms-"+o+o;case 883:if(45===o.charCodeAt(8))return"-webkit-"+o+o;if(0<o.indexOf("image-set(",11))return o.replace(_,"$1-webkit-$2")+o;break;case 932:if(45===o.charCodeAt(4))switch(o.charCodeAt(5)){case 103:return"-webkit-box-"+o.replace("-grow","")+"-webkit-"+o+"-ms-"+o.replace("grow","positive")+o;case 115:return"-webkit-"+o+"-ms-"+o.replace("shrink","negative")+o;case 98:return"-webkit-"+o+"-ms-"+o.replace("basis","preferred-size")+o}return"-webkit-"+o+"-ms-"+o+o;case 964:return"-webkit-"+o+"-ms-flex-"+o+o;case 1023:if(99!==o.charCodeAt(8))break;return"-webkit-box-pack"+(s=o.substring(o.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+o+"-ms-flex-pack"+s+o;case 1005:return h.test(o)?o.replace(d,":-webkit-")+o.replace(d,":-moz-")+o:o;case 1e3:switch(t=(s=o.substring(13).trim()).indexOf("-")+1,s.charCodeAt(0)+s.charCodeAt(t)){case 226:s=o.replace(w,"tb");break;case 232:s=o.replace(w,"tb-rl");break;case 220:s=o.replace(w,"lr");break;default:return o}return"-webkit-"+o+"-ms-"+s+o;case 1017:if(-1===o.indexOf("sticky",9))break;case 975:switch(t=(o=e).length-10,c=(s=(33===o.charCodeAt(t)?o.substring(0,t):o).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|s.charCodeAt(7))){case 203:if(111>s.charCodeAt(8))break;case 115:o=o.replace(s,"-webkit-"+s)+";"+o;break;case 207:case 102:o=o.replace(s,"-webkit-"+(102<c?"inline-":"")+"box")+";"+o.replace(s,"-webkit-"+s)+";"+o.replace(s,"-ms-"+s+"box")+";"+o}return o+";";case 938:if(45===o.charCodeAt(5))switch(o.charCodeAt(6)){case 105:return s=o.replace("-items",""),"-webkit-"+o+"-webkit-box-"+s+"-ms-flex-"+s+o;case 115:return"-webkit-"+o+"-ms-flex-item-"+o.replace(x,"")+o;default:return"-webkit-"+o+"-ms-flex-line-pack"+o.replace("align-content","").replace(x,"")+o}break;case 973:case 989:if(45!==o.charCodeAt(3)||122===o.charCodeAt(4))break;case 931:case 953:if(!0===O.test(e))return 115===(s=e.substring(e.indexOf(":")+1)).charCodeAt(0)?a(e.replace("stretch","fill-available"),t,r,n).replace(":fill-available",":stretch"):o.replace(s,"-webkit-"+s)+o.replace(s,"-moz-"+s.replace("fill-",""))+o;break;case 962:if(o="-webkit-"+o+(102===o.charCodeAt(5)?"-ms-"+o:"")+o,211===r+n&&105===o.charCodeAt(13)&&0<o.indexOf("transform",10))return o.substring(0,o.indexOf(";",27)+1).replace(p,"$1-webkit-$2")+o}return o}function i(e,t){var r=e.indexOf(1===t?":":"{"),n=e.substring(0,3!==t?r:10);return r=e.substring(r+1,e.length-1),I(2!==t?n:n.replace(A,"$1"),r,t)}function o(e,t){var r=a(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return r!==t+";"?r.replace(C," or ($1)").substring(4):"("+t+")"}function c(e,t,r,n,a,i,o,c,s,l){for(var f,d=0,h=t;d<z;++d)switch(f=j[d].call(u,e,h,r,n,a,i,o,c,s,l)){case void 0:case!1:case!0:case null:break;default:h=f}if(h!==t)return h}function s(e){return void 0!==(e=e.prefix)&&(I=null,e?"function"!=typeof e?E=1:(E=2,I=e):E=0),s}function u(e,r){var n=e;if(33>n.charCodeAt(0)&&(n=n.trim()),n=[n],0<z){var a=c(-1,r,n,n,P,S,0,0,0,0);void 0!==a&&"string"==typeof a&&(r=a)}var i=t(T,n,r,0,0);return 0<z&&void 0!==(a=c(-2,i,n,n,P,S,i.length,0,0,0))&&(i=a),R=0,S=P=1,i}var l=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,h=/zoo|gra/,p=/([,: ])(transform)/g,v=/,\r+?/g,g=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,m=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,k=/\(\s*(.*)\s*\)/g,C=/([\s\S]*?);/g,x=/-self|flex-/g,A=/[^]*?(:[rp][el]a[\w-]+)[^]*/,O=/stretch|:\s*\w+\-(?:conte|avail)/,_=/([^-])(image-set\()/,S=1,P=1,R=0,E=1,T=[],j=[],z=0,I=null,L=0;return u.use=function e(t){switch(t){case void 0:case null:z=j.length=0;break;default:if("function"==typeof t)j[z++]=t;else if("object"==typeof t)for(var r=0,n=t.length;r<n;++r)e(t[r]);else L=0|!!t}return e},u.set=s,void 0!==e&&s(e),u};var f="/*|*/";function d(e){e&&h.current.insert(e+"}")}var h={current:null},p=function(e,t,r,n,a,i,o,c,s,u){switch(e){case 1:switch(t.charCodeAt(0)){case 64:return h.current.insert(t+";"),"";case 108:if(98===t.charCodeAt(2))return""}break;case 2:if(0===c)return t+f;break;case 3:switch(c){case 102:case 112:return h.current.insert(r[0]+t),"";default:return t+(0===u?f:"")}case-2:t.split("/*|*/}").forEach(d)}};function v(e,t,r){var n="";return r.split(" ").forEach((function(r){void 0!==e[r]?t.push(e[r]):n+=r+" "})),n}var g=function(e,t,r){var n=e.key+"-"+t.name;if(!1===r&&void 0===e.registered[n]&&(e.registered[n]=t.styles),void 0===e.inserted[t.name]){var a=t;do{e.insert("."+n,a,e.sheet,!0),a=a.next}while(void 0!==a)}};const y=function(e){for(var t,r=0,n=0,a=e.length;a>=4;++n,a-=4)t=1540483477*(65535&(t=255&e.charCodeAt(n)|(255&e.charCodeAt(++n))<<8|(255&e.charCodeAt(++n))<<16|(255&e.charCodeAt(++n))<<24))+(59797*(t>>>16)<<16),r=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&r)+(59797*(r>>>16)<<16);switch(a){case 3:r^=(255&e.charCodeAt(n+2))<<16;case 2:r^=(255&e.charCodeAt(n+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(n)))+(59797*(r>>>16)<<16)}return(((r=1540483477*(65535&(r^=r>>>13))+(59797*(r>>>16)<<16))^r>>>15)>>>0).toString(36)},m={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var b=/[A-Z]|^ms/g,w=/_EMO_([^_]+?)_([^]*?)_EMO_/g,k=function(e){return 45===e.charCodeAt(1)},C=function(e){return null!=e&&"boolean"!=typeof e},x=o((function(e){return k(e)?e:e.replace(b,"-$&").toLowerCase()})),A=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(w,(function(e,t,r){return _={name:t,styles:r,next:_},t}))}return 1===m[e]||k(e)||"number"!=typeof t||0===t?t:t+"px"};function O(e,t,r,n){if(null==r)return"";if(void 0!==r.__emotion_styles)return r;switch(typeof r){case"boolean":return"";case"object":if(1===r.anim)return _={name:r.name,styles:r.styles,next:_},r.name;if(void 0!==r.styles){var a=r.next;if(void 0!==a)for(;void 0!==a;)_={name:a.name,styles:a.styles,next:_},a=a.next;return r.styles+";"}return function(e,t,r){var n="";if(Array.isArray(r))for(var a=0;a<r.length;a++)n+=O(e,t,r[a],!1);else for(var i in r){var o=r[i];if("object"!=typeof o)null!=t&&void 0!==t[o]?n+=i+"{"+t[o]+"}":C(o)&&(n+=x(i)+":"+A(i,o)+";");else if(!Array.isArray(o)||"string"!=typeof o[0]||null!=t&&void 0!==t[o[0]]){var c=O(e,t,o,!1);switch(i){case"animation":case"animationName":n+=x(i)+":"+c+";";break;default:n+=i+"{"+c+"}"}}else for(var s=0;s<o.length;s++)C(o[s])&&(n+=x(i)+":"+A(i,o[s])+";")}return n}(e,t,r);case"function":if(void 0!==e){var i=_,o=r(e);return _=i,O(e,t,o,n)}}if(null==t)return r;var c=t[r];return void 0===c||n?r:c}var _,S=/label:\s*([^\s;\n{]+)\s*;/g,P=function(e,t,r){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var n=!0,a="";_=void 0;var i=e[0];null==i||void 0===i.raw?(n=!1,a+=O(r,t,i,!1)):a+=i[0];for(var o=1;o<e.length;o++)a+=O(r,t,e[o],46===a.charCodeAt(a.length-1)),n&&(a+=i[o]);S.lastIndex=0;for(var c,s="";null!==(c=S.exec(a));)s+="-"+c[1];return{name:y(a)+s,styles:a,next:_}},R=(0,i.createContext)("undefined"!=typeof HTMLElement?function(e){void 0===e&&(e={});var t,r=e.key||"css";void 0!==e.prefix&&(t={prefix:e.prefix});var n,a=new l(t),i={};n=e.container||document.head;var o,c=document.querySelectorAll("style[data-emotion-"+r+"]");Array.prototype.forEach.call(c,(function(e){e.getAttribute("data-emotion-"+r).split(" ").forEach((function(e){i[e]=!0})),e.parentNode!==n&&n.appendChild(e)})),a.use(e.stylisPlugins)(p),o=function(e,t,r,n){var i=t.name;h.current=r,a(e,t.styles),n&&(s.inserted[i]=!0)};var s={key:r,sheet:new u({key:r,container:n,nonce:e.nonce,speedy:e.speedy}),nonce:e.nonce,inserted:i,registered:{},insert:o};return s}():null),E=(0,i.createContext)({}),T=(R.Provider,function(e){return(0,i.forwardRef)((function(t,r){return(0,i.createElement)(R.Consumer,null,(function(n){return e(t,n,r)}))}))});Object.prototype.hasOwnProperty,i.Component;var j=function e(t){for(var r=t.length,n=0,a="";n<r;n++){var i=t[n];if(null!=i){var o=void 0;switch(typeof i){case"boolean":break;case"object":if(Array.isArray(i))o=e(i);else for(var c in o="",i)i[c]&&c&&(o&&(o+=" "),o+=c);break;default:o=i}o&&(a&&(a+=" "),a+=o)}}return a};function z(e,t,r){var n=[],a=v(e,n,r);return n.length<2?r:a+t(n)}T((function(e,t){return(0,i.createElement)(E.Consumer,null,(function(r){var n=function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var a=P(r,t.registered);return g(t,a,!1),t.key+"-"+a.name},a={css:n,cx:function(){for(var e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return z(t.registered,n,j(r))},theme:r};return e.children(a)}))}));var I=s,L=function(e){return"theme"!==e&&"innerRef"!==e},M=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?I:L};function D(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function N(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?D(r,!0).forEach((function(t){a()(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):D(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}const V=function e(t,r){var n,a,o;void 0!==r&&(n=r.label,o=r.target,a=t.__emotion_forwardProp&&r.shouldForwardProp?function(e){return t.__emotion_forwardProp(e)&&r.shouldForwardProp(e)}:r.shouldForwardProp);var c=t.__emotion_real===t,s=c&&t.__emotion_base||t;"function"!=typeof a&&c&&(a=t.__emotion_forwardProp);var u=a||M(s),l=!u("as");return function(){var f=arguments,d=c&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==n&&d.push("label:"+n+";"),null==f[0]||void 0===f[0].raw)d.push.apply(d,f);else{d.push(f[0][0]);for(var h=f.length,p=1;p<h;p++)d.push(f[p],f[0][p])}var y=T((function(e,t,r){return(0,i.createElement)(E.Consumer,null,(function(n){var c=l&&e.as||s,f="",h=[],p=e;if(null==e.theme){for(var y in p={},e)p[y]=e[y];p.theme=n}"string"==typeof e.className?f=v(t.registered,h,e.className):null!=e.className&&(f=e.className+" ");var m=P(d.concat(h),t.registered,p);g(t,m,"string"==typeof c),f+=t.key+"-"+m.name,void 0!==o&&(f+=" "+o);var b=l&&void 0===a?M(c):u,w={};for(var k in e)l&&"as"===k||b(k)&&(w[k]=e[k]);return w.className=f,w.ref=r||e.innerRef,(0,i.createElement)(c,w)}))}));return y.displayName=void 0!==n?n:"Styled("+("string"==typeof s?s:s.displayName||s.name||"Component")+")",y.defaultProps=t.defaultProps,y.__emotion_real=y,y.__emotion_base=s,y.__emotion_styles=d,y.__emotion_forwardProp=a,Object.defineProperty(y,"toString",{value:function(){return"."+o}}),y.withComponent=function(t,n){return e(t,void 0!==n?N({},r||{},{},n):r).apply(void 0,d)},y}}},6848:(e,t,r)=>{"use strict";r.d(t,{ZP:()=>M,g_:()=>L});var n=r(7294),a=Object.prototype.hasOwnProperty;function i(){return"undefined"==typeof document||void 0===document.visibilityState||"hidden"!==document.visibilityState}var o=new WeakMap,c=0,s=new(function(){function e(e){void 0===e&&(e={}),this.__cache=new Map(Object.entries(e)),this.__listeners=[]}return e.prototype.get=function(e){var t=this.serializeKey(e)[0];return this.__cache.get(t)},e.prototype.set=function(e,t){var r=this.serializeKey(e)[0];this.__cache.set(r,t),this.notify()},e.prototype.keys=function(){return Array.from(this.__cache.keys())},e.prototype.has=function(e){var t=this.serializeKey(e)[0];return this.__cache.has(t)},e.prototype.clear=function(){this.__cache.clear(),this.notify()},e.prototype.delete=function(e){var t=this.serializeKey(e)[0];this.__cache.delete(t),this.notify()},e.prototype.serializeKey=function(e){var t=null;if("function"==typeof e)try{e=e()}catch(t){e=""}return Array.isArray(e)?(t=e,e=function(e){if(!e.length)return"";for(var t="arg",r=0;r<e.length;++r){var n=void 0;null===e[r]||"object"!=typeof e[r]&&"function"!=typeof e[r]?n="string"==typeof e[r]?'"'+e[r]+'"':String(e[r]):o.has(e[r])?n=o.get(e[r]):(n=c,o.set(e[r],c++)),t+="@"+n}return t}(e)):e=String(e||""),[e,t,e?"err@"+e:"",e?"validating@"+e:""]},e.prototype.subscribe=function(e){var t=this;if("function"!=typeof e)throw new Error("Expected the listener to be a function.");var r=!0;return this.__listeners.push(e),function(){if(r){r=!1;var n=t.__listeners.indexOf(e);n>-1&&(t.__listeners[n]=t.__listeners[t.__listeners.length-1],t.__listeners.length--)}}},e.prototype.notify=function(){for(var e=0,t=this.__listeners;e<t.length;e++)(0,t[e])()},e}()),u="undefined"!=typeof window&&navigator.connection&&-1!==["slow-2g","2g"].indexOf(navigator.connection.effectiveType);const l={onLoadingSlow:function(){},onSuccess:function(){},onError:function(){},onErrorRetry:function(e,t,r,n,a){if(i()&&!("number"==typeof r.errorRetryCount&&a.retryCount>r.errorRetryCount)){var o=Math.min(a.retryCount||0,8),c=~~((Math.random()+.5)*(1<<o))*r.errorRetryInterval;setTimeout(n,c,a)}},errorRetryInterval:1e3*(u?10:5),focusThrottleInterval:5e3,dedupingInterval:2e3,loadingTimeout:1e3*(u?5:3),refreshInterval:0,revalidateOnFocus:!0,revalidateOnReconnect:!0,refreshWhenHidden:!1,refreshWhenOffline:!1,shouldRetryOnError:!0,suspense:!1,compare:function e(t,r){var n,i;if(t===r)return!0;if(t&&r&&(n=t.constructor)===r.constructor){if(n===Date)return t.getTime()===r.getTime();if(n===RegExp)return t.toString()===r.toString();if(n===Array){if((i=t.length)===r.length)for(;i--&&e(t[i],r[i]););return-1===i}if(!n||"object"==typeof t){for(n in i=0,t){if(a.call(t,n)&&++i&&!a.call(r,n))return!1;if(!(n in r)||!e(t[n],r[n]))return!1}return Object.keys(r).length===i}}return t!=t&&r!=r},fetcher:function(e){return fetch(e).then((function(e){return e.json()}))}};function f(){return void 0===navigator.onLine||navigator.onLine}var d=(0,n.createContext)({});d.displayName="SWRConfigContext";const h=d;var p=function(e,t,r,n){return new(r||(r=Promise))((function(a,i){function o(e){try{s(n.next(e))}catch(e){i(e)}}function c(e){try{s(n.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,c)}s((n=n.apply(e,t||[])).next())}))},v=function(e,t){var r,n,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(a=2&i[0]?n.return:i[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,i[1])).done)return a;switch(n=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,n=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],n=0}finally{r=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},g="undefined"==typeof window,y=g?null:window.requestIdleCallback||function(e){return setTimeout(e,1)},m=g?n.useEffect:n.useLayoutEffect,b={},w={},k={},C={},x={},A={},O={};if(!g&&window.addEventListener){var _=function(e){if(i()&&f())for(var t in e)e[t][0]&&e[t][0]()};window.addEventListener("visibilitychange",(function(){return _(k)}),!1),window.addEventListener("focus",(function(){return _(k)}),!1),window.addEventListener("online",(function(){return _(C)}),!1)}var S=function(e,t){void 0===t&&(t=!0);var r=s.serializeKey(e),n=r[0],a=r[2],i=r[3];if(!n)return Promise.resolve();var o=x[n];if(n&&o){for(var c=s.get(n),u=s.get(a),l=s.get(i),f=[],d=0;d<o.length;++d)f.push(o[d](t,c,u,l,d>0));return Promise.all(f).then((function(){return s.get(n)}))}return Promise.resolve(s.get(n))},P=function(e,t,r,n){var a=x[e];if(e&&a)for(var i=0;i<a.length;++i)a[i](!1,t,r,n)},R=function(e,t,r){return void 0===r&&(r=!0),p(void 0,void 0,void 0,(function(){var n,a,i,o,c,u,l,f,d,h,p,g;return v(this,(function(v){switch(v.label){case 0:if(n=s.serializeKey(e),a=n[0],i=n[2],!a)return[2];if(void 0===t)return[2,S(e,r)];if(A[a]=Date.now()-1,O[a]=0,o=A[a],c=w[a],!t||"function"!=typeof t)return[3,5];v.label=1;case 1:return v.trys.push([1,3,,4]),[4,t(s.get(a))];case 2:return u=v.sent(),[3,4];case 3:return f=v.sent(),l=f,[3,4];case 4:return[3,11];case 5:if(!t||"function"!=typeof t.then)return[3,10];v.label=6;case 6:return v.trys.push([6,8,,9]),[4,t];case 7:return u=v.sent(),[3,9];case 8:return d=v.sent(),l=d,[3,9];case 9:return[3,11];case 10:u=t,v.label=11;case 11:if(o!==A[a]||c!==w[a]){if(l)throw l;return[2,u]}if(void 0!==u&&s.set(a,u),s.set(i,l),O[a]=Date.now()-1,h=x[a]){for(p=[],g=0;g<h.length;++g)p.push(h[g](!!r,u,l,void 0,g>0));return[2,Promise.all(p).then((function(){if(l)throw l;return s.get(a)}))]}if(l)throw l;return[2,u]}}))}))};h.Provider;const E=function(){for(var e=this,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var a,o,c={};t.length>=1&&(a=t[0]),t.length>2?(o=t[1],c=t[2]):"function"==typeof t[1]?o=t[1]:"object"==typeof t[1]&&(c=t[1]);var u=s.serializeKey(a),d=u[0],g=u[1],_=u[2],S=u[3];c=Object.assign({},l,(0,n.useContext)(h),c);var E=(0,n.useRef)(c);m((function(){E.current=c})),void 0===o&&(o=c.fetcher);var T=function(){var e=s.get(d);return void 0===e?c.initialData:e},j=T(),z=s.get(_),I=!!s.get(S),L=(0,n.useRef)({data:!1,error:!1,isValidating:!1}),M=(0,n.useRef)({data:j,error:z,isValidating:I});(0,n.useDebugValue)(M.current.data);var D=(0,n.useState)(null)[1],N=(0,n.useCallback)((function(e){var t=!1;for(var r in e)M.current[r]!==e[r]&&(M.current[r]=e[r],L.current[r]&&(t=!0));if(t||c.suspense){if(V.current)return;D({})}}),[]),V=(0,n.useRef)(!1),W=(0,n.useRef)(d),$=(0,n.useRef)({emit:function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];V.current||(t=E.current)[e].apply(t,r)}}),H=(0,n.useCallback)((function(e,t){return R(W.current,e,t)}),[]),F=function(e,t){t&&(e[d]?e[d].push(t):e[d]=[t])},G=function(e,t){if(e[d]){var r=e[d],n=r.indexOf(t);n>=0&&(r[n]=r[r.length-1],r.pop())}},K=(0,n.useCallback)((function(t){return void 0===t&&(t={}),p(e,void 0,void 0,(function(){var e,r,n,a,i,u,l;return v(this,(function(f){switch(f.label){case 0:if(!d||!o)return[2,!1];if(V.current)return[2,!1];t=Object.assign({dedupe:!1},t),e=!0,r=void 0!==b[d]&&t.dedupe,f.label=1;case 1:return f.trys.push([1,6,,7]),N({isValidating:!0}),s.set(S,!0),r||P(d,M.current.data,M.current.error,!0),n=void 0,a=void 0,r?(a=w[d],[4,b[d]]):[3,3];case 2:return n=f.sent(),[3,5];case 3:return c.loadingTimeout&&!s.get(d)&&setTimeout((function(){e&&$.current.emit("onLoadingSlow",d,c)}),c.loadingTimeout),b[d]=null!==g?o.apply(void 0,g):o(d),w[d]=a=Date.now(),[4,b[d]];case 4:n=f.sent(),setTimeout((function(){delete b[d],delete w[d]}),c.dedupingInterval),$.current.emit("onSuccess",n,d,c),f.label=5;case 5:return w[d]>a||A[d]&&(a<=A[d]||a<=O[d]||0===O[d])?(N({isValidating:!1}),[2,!1]):(s.set(d,n),s.set(_,void 0),s.set(S,!1),i={isValidating:!1},void 0!==M.current.error&&(i.error=void 0),c.compare(M.current.data,n)||(i.data=n),N(i),r||P(d,n,i.error,!1),[3,7]);case 6:return u=f.sent(),delete b[d],delete w[d],s.set(_,u),M.current.error!==u&&(N({isValidating:!1,error:u}),r||P(d,void 0,u,!1)),$.current.emit("onError",u,d,c),c.shouldRetryOnError&&(l=(t.retryCount||0)+1,$.current.emit("onErrorRetry",u,d,c,K,Object.assign({dedupe:!0},t,{retryCount:l}))),[3,7];case 7:return e=!1,[2,!0]}}))}))}),[d]);m((function(){if(d){V.current=!1;var e=M.current.data,t=T();W.current!==d&&(W.current=d),c.compare(e,t)||N({data:t});var r=function(){return K({dedupe:!0})};(c.revalidateOnMount||!c.initialData&&void 0===c.revalidateOnMount)&&(void 0!==t?y(r):r());var n=!1,a=function(){!n&&E.current.revalidateOnFocus&&(n=!0,r(),setTimeout((function(){return n=!1}),E.current.focusThrottleInterval))},i=function(){E.current.revalidateOnReconnect&&r()},o=function(e,t,n,a,i){void 0===e&&(e=!0),void 0===i&&(i=!0);var o={},s=!1;return void 0===t||c.compare(M.current.data,t)||(o.data=t,s=!0),M.current.error!==n&&(o.error=n,s=!0),void 0!==a&&M.current.isValidating!==a&&(o.isValidating=a,s=!0),s&&N(o),!!e&&(i?r():K())};return F(k,a),F(C,i),F(x,o),function(){N=function(){return null},V.current=!0,G(k,a),G(C,i),G(x,o)}}}),[d,K]),m((function(){var t=null,r=function(){return p(e,void 0,void 0,(function(){return v(this,(function(e){switch(e.label){case 0:return M.current.error||!E.current.refreshWhenHidden&&!i()||!E.current.refreshWhenOffline&&!f()?[3,2]:[4,K({dedupe:!0})];case 1:e.sent(),e.label=2;case 2:return E.current.refreshInterval&&!M.current.error&&(t=setTimeout(r,E.current.refreshInterval)),[2]}}))}))};return E.current.refreshInterval&&(t=setTimeout(r,E.current.refreshInterval)),function(){t&&clearTimeout(t)}}),[c.refreshInterval,c.refreshWhenHidden,c.refreshWhenOffline,K]);var U=(0,n.useMemo)((function(){var e={revalidate:K,mutate:H};return Object.defineProperties(e,{error:{get:function(){return L.current.error=!0,W.current===d?M.current.error:z},enumerable:!0},data:{get:function(){return L.current.data=!0,W.current===d?M.current.data:j},enumerable:!0},isValidating:{get:function(){return L.current.isValidating=!0,M.current.isValidating},enumerable:!0}}),e}),[K]);if(c.suspense){var q=s.get(d),B=s.get(_);if(void 0===q&&(q=j),void 0===B&&(B=z),void 0===q&&void 0===B){if(b[d]||K(),b[d]&&"function"==typeof b[d].then)throw b[d];q=b[d]}if(void 0===q&&B)throw B;return{error:B,data:q,revalidate:K,mutate:H,isValidating:M.current.isValidating}}return U};var T=function(){return(T=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var a in t=arguments[r])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},j=function(e,t,r,n){return new(r||(r=Promise))((function(a,i){function o(e){try{s(n.next(e))}catch(e){i(e)}}function c(e){try{s(n.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,c)}s((n=n.apply(e,t||[])).next())}))},z=function(e,t){var r,n,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(a=2&i[0]?n.return:i[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,i[1])).done)return a;switch(n=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,n=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],n=0}finally{r=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},I=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(n=Object.getOwnPropertySymbols(e);a<n.length;a++)t.indexOf(n[a])<0&&Object.prototype.propertyIsEnumerable.call(e,n[a])&&(r[n[a]]=e[n[a]])}return r};function L(){for(var e=this,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var a,i,o={};t.length>=1&&(a=t[0]),t.length>2?(i=t[1],o=t[2]):"function"==typeof t[1]?i=t[1]:"object"==typeof t[1]&&(o=t[1]);var c=(o=Object.assign({},l,(0,n.useContext)(h),o)).initialSize,u=void 0===c?1:c,f=o.revalidateAll,d=void 0!==f&&f,p=o.persistSize,v=void 0!==p&&p,g=o.fetcher,y=I(o,["initialSize","revalidateAll","persistSize","fetcher"]);void 0===i&&(i=g);var m=null;try{m=s.serializeKey(a(0,null))[0]}catch(e){}var b=(0,n.useState)(!1)[1],w=null;m&&(w="context@"+m);var k,C=null;m&&(C="size@"+m,k=s.get(C));var x=(0,n.useRef)(k||u),A=(0,n.useRef)(!1);(0,n.useEffect)((function(){A.current?v||(x.current=u):A.current=!0}),[m]);var O=E(m?["many",m]:null,(function(){return j(e,void 0,void 0,(function(){var e,t,r,n,c,u,l,f,h,p;return z(this,(function(v){switch(v.label){case 0:e=s.get(w)||{},t=e.originalData,r=e.force,n=[],c=null,u=0,v.label=1;case 1:return u<x.current?(l=s.serializeKey(a(u,c)),f=l[0],h=l[1],f?(p=s.get(f),d||r||void 0===r&&0===u||t&&!o.compare(t[u],p)||void 0===p?null===h?[3,3]:[4,i.apply(void 0,h)]:[3,6]):[3,8]):[3,8];case 2:return p=v.sent(),[3,5];case 3:return[4,i(f)];case 4:p=v.sent(),v.label=5;case 5:s.set(f,p),v.label=6;case 6:n.push(p),c=p,v.label=7;case 7:return++u,[3,1];case 8:return s.delete(w),[2,n]}}))}))}),y),_=(0,n.useRef)(O.data);(0,n.useEffect)((function(){_.current=O.data}),[O.data]);var S=(0,n.useCallback)((function(e,t){if(void 0===t&&(t=!0),t&&void 0!==e){var r=_.current;s.set(w,{originalData:r,force:!1})}else t&&s.set(w,{force:!0});return O.mutate(e,t)}),[O.mutate,w]),P=x.current,R=(0,n.useCallback)((function(e){return"function"==typeof e?x.current=e(x.current):"number"==typeof e&&(x.current=e),s.set(C,x.current),b((function(e){return!e})),S((function(e){return e}))}),[S,C]);return T(T({},O),{mutate:S,size:P,setSize:R})}const M=E}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvbWVtb2l6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2lzLXByb3AtdmFsaWQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NoZWV0L2Rpc3Qvc2hlZXQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxpcy9kaXN0L3N0eWxpcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY2FjaGUvZGlzdC9jYWNoZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXRpbHMvZGlzdC91dGlscy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaGFzaC9kaXN0L2hhc2guYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvdW5pdGxlc3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NlcmlhbGl6ZS9kaXN0L3NlcmlhbGl6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY29yZS9kaXN0L2NvcmUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC1iYXNlL2Rpc3Qvc3R5bGVkLWJhc2UuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL2RlcXVhbC9saXRlL2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvc3dyL2VzbS9saWJzL2lzLWRvY3VtZW50LXZpc2libGUuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3N3ci9lc20vbGlicy9oYXNoLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9zd3IvZXNtL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvc3dyL2VzbS9jYWNoZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvc3dyL2VzbS9saWJzL2lzLW9ubGluZS5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvc3dyL2VzbS9zd3ItY29uZmlnLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vc2xlYWN0LXRzLWZyb250Ly4vbm9kZV9tb2R1bGVzL3N3ci9lc20vdXNlLXN3ci5qcyIsIndlYnBhY2s6Ly9zbGVhY3QtdHMtZnJvbnQvLi9ub2RlX21vZHVsZXMvc3dyL2VzbS91c2Utc3dyLWluZmluaXRlLmpzIiwid2VicGFjazovL3NsZWFjdC10cy1mcm9udC8uL25vZGVfbW9kdWxlcy9zd3IvZXNtL2luZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJmbiIsImNhY2hlIiwiYXJnIiwidW5kZWZpbmVkIiwicmVhY3RQcm9wc1JlZ2V4IiwicHJvcCIsInRlc3QiLCJjaGFyQ29kZUF0IiwiU3R5bGVTaGVldCIsIm9wdGlvbnMiLCJ0aGlzIiwiaXNTcGVlZHkiLCJzcGVlZHkiLCJ0YWdzIiwiY3RyIiwibm9uY2UiLCJjb250YWluZXIiLCJiZWZvcmUiLCJfcHJvdG8iLCJpbnNlcnQiLCJydWxlIiwiX3RhZyIsInRhZyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJsZW5ndGgiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsInB1c2giLCJzaGVldCIsImkiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsInNoZWV0Rm9yVGFnIiwiaXNJbXBvcnRSdWxlIiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwiZSIsImZsdXNoIiwiZm9yRWFjaCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIlciLCJNIiwiZCIsImMiLCJoIiwiYSIsInEiLCJnIiwiayIsInkiLCJDIiwibSIsImIiLCJ2IiwibiIsIngiLCJLIiwidSIsImwiLCJyIiwiSSIsInQiLCJCIiwiSiIsImYiLCJwIiwiRiIsIkciLCJyZXBsYWNlIiwiTiIsInRyaW0iLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJjYSIsIk8iLCJBIiwiSCIsIlgiLCJEIiwieiIsImpvaW4iLCJkYSIsImVhIiwiZmEiLCJ3IiwiTCIsIlAiLCJZIiwiRSIsImhhIiwiUSIsInNwbGl0IiwiaWEiLCJaIiwiaW5kZXhPZiIsImphIiwia2EiLCJhYSIsImJhIiwibGEiLCJtYSIsIlIiLCJuYSIsIm9hIiwiUyIsImNhbGwiLCJVIiwicHJlZml4IiwidXNlIiwiVCIsInNldCIsImRlbGltaXRlciIsInRvU2hlZXQiLCJibG9jayIsIlNoZWV0IiwiY3VycmVudCIsInJ1bGVTaGVldCIsImNvbnRleHQiLCJjb250ZW50Iiwic2VsZWN0b3JzIiwicGFyZW50cyIsImxpbmUiLCJjb2x1bW4iLCJucyIsImRlcHRoIiwiYXQiLCJyZWdpc3RlcmVkIiwicmVnaXN0ZXJlZFN0eWxlcyIsImNsYXNzTmFtZXMiLCJyYXdDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJzZXJpYWxpemVkIiwiaXNTdHJpbmdUYWciLCJuYW1lIiwic3R5bGVzIiwiaW5zZXJ0ZWQiLCJuZXh0Iiwic3RyIiwibGVuIiwidG9TdHJpbmciLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibXNHcmlkUm93IiwibXNHcmlkUm93U3BhbiIsIm1zR3JpZENvbHVtbiIsIm1zR3JpZENvbHVtblNwYW4iLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIldlYmtpdExpbmVDbGFtcCIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImh5cGhlbmF0ZVJlZ2V4IiwiYW5pbWF0aW9uUmVnZXgiLCJpc0N1c3RvbVByb3BlcnR5IiwicHJvcGVydHkiLCJpc1Byb2Nlc3NhYmxlVmFsdWUiLCJwcm9jZXNzU3R5bGVOYW1lIiwic3R5bGVOYW1lIiwidG9Mb3dlckNhc2UiLCJwcm9jZXNzU3R5bGVWYWx1ZSIsIm1hdGNoIiwicDEiLCJwMiIsImN1cnNvciIsImhhbmRsZUludGVycG9sYXRpb24iLCJtZXJnZWRQcm9wcyIsImludGVycG9sYXRpb24iLCJjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uIiwiX19lbW90aW9uX3N0eWxlcyIsImFuaW0iLCJzdHJpbmciLCJBcnJheSIsImlzQXJyYXkiLCJfa2V5IiwiaW50ZXJwb2xhdGVkIiwiX2kiLCJjcmVhdGVTdHJpbmdGcm9tT2JqZWN0IiwicHJldmlvdXNDdXJzb3IiLCJyZXN1bHQiLCJjYWNoZWQiLCJsYWJlbFBhdHRlcm4iLCJhcmdzIiwic3RyaW5nTW9kZSIsInN0cmluZ3MiLCJyYXciLCJsYXN0SW5kZXgiLCJpZGVudGlmaWVyTmFtZSIsImV4ZWMiLCJFbW90aW9uQ2FjaGVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIkhUTUxFbGVtZW50Iiwic3R5bGlzT3B0aW9ucyIsInN0eWxpcyIsImhlYWQiLCJfaW5zZXJ0Iiwibm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibm9kZSIsImdldEF0dHJpYnV0ZSIsImlkIiwic3R5bGlzUGx1Z2lucyIsInNlbGVjdG9yIiwic2hvdWxkQ2FjaGUiLCJUaGVtZUNvbnRleHQiLCJ3aXRoRW1vdGlvbkNhY2hlIiwiUHJvdmlkZXIiLCJmdW5jIiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwiQ29uc3VtZXIiLCJoYXNPd25Qcm9wZXJ0eSIsIkNvbXBvbmVudCIsImNsYXNzbmFtZXMiLCJjbHMiLCJ0b0FkZCIsIm1lcmdlIiwiY3NzIiwidGhlbWUiLCJfbGVuIiwiYXJndW1lbnRzIiwiY3giLCJfbGVuMiIsIl9rZXkyIiwiY2hpbGRyZW4iLCJ0ZXN0T21pdFByb3BzT25TdHJpbmdUYWciLCJ0ZXN0T21pdFByb3BzT25Db21wb25lbnQiLCJnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsInNvdXJjZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3JlYXRlU3R5bGVkIiwic2hvdWxkRm9yd2FyZFByb3AiLCJ0YXJnZXRDbGFzc05hbWUiLCJsYWJlbCIsIl9fZW1vdGlvbl9mb3J3YXJkUHJvcCIsInByb3BOYW1lIiwiaXNSZWFsIiwiX19lbW90aW9uX3JlYWwiLCJiYXNlVGFnIiwiX19lbW90aW9uX2Jhc2UiLCJkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJzaG91bGRVc2VBcyIsInNsaWNlIiwiU3R5bGVkIiwiZmluYWxUYWciLCJhcyIsImNsYXNzSW50ZXJwb2xhdGlvbnMiLCJjb25jYXQiLCJmaW5hbFNob3VsZEZvcndhcmRQcm9wIiwibmV3UHJvcHMiLCJpbm5lclJlZiIsImRpc3BsYXlOYW1lIiwiZGVmYXVsdFByb3BzIiwid2l0aENvbXBvbmVudCIsIm5leHRUYWciLCJuZXh0T3B0aW9ucyIsImhhcyIsImlzRG9jdW1lbnRWaXNpYmxlIiwidmlzaWJpbGl0eVN0YXRlIiwidGFibGUiLCJXZWFrTWFwIiwiY291bnRlciIsIkNhY2hlIiwiaW5pdGlhbERhdGEiLCJfX2NhY2hlIiwiTWFwIiwiZW50cmllcyIsIl9fbGlzdGVuZXJzIiwiZ2V0Iiwic2VyaWFsaXplS2V5Iiwibm90aWZ5IiwiZnJvbSIsImNsZWFyIiwiZGVsZXRlIiwiZXJyIiwiX2hhc2giLCJTdHJpbmciLCJoYXNoIiwic3Vic2NyaWJlIiwibGlzdGVuZXIiLCJfdGhpcyIsIkVycm9yIiwiaXNTdWJzY3JpYmVkIiwiaW5kZXgiLCJfYSIsInNsb3dDb25uZWN0aW9uIiwid2luZG93IiwibmF2aWdhdG9yIiwiZWZmZWN0aXZlVHlwZSIsIm9uTG9hZGluZ1Nsb3ciLCJvblN1Y2Nlc3MiLCJvbkVycm9yIiwib25FcnJvclJldHJ5IiwiXyIsIl9fIiwiY29uZmlnIiwicmV2YWxpZGF0ZSIsIm9wdHMiLCJlcnJvclJldHJ5Q291bnQiLCJyZXRyeUNvdW50IiwiY291bnQiLCJNYXRoIiwibWluIiwidGltZW91dCIsInJhbmRvbSIsImVycm9yUmV0cnlJbnRlcnZhbCIsInNldFRpbWVvdXQiLCJmb2N1c1Rocm90dGxlSW50ZXJ2YWwiLCJkZWR1cGluZ0ludGVydmFsIiwibG9hZGluZ1RpbWVvdXQiLCJyZWZyZXNoSW50ZXJ2YWwiLCJyZXZhbGlkYXRlT25Gb2N1cyIsInJldmFsaWRhdGVPblJlY29ubmVjdCIsInJlZnJlc2hXaGVuSGlkZGVuIiwicmVmcmVzaFdoZW5PZmZsaW5lIiwic2hvdWxkUmV0cnlPbkVycm9yIiwic3VzcGVuc2UiLCJjb21wYXJlIiwiZGVxdWFsIiwiZm9vIiwiYmFyIiwiY3RvciIsIkRhdGUiLCJnZXRUaW1lIiwiUmVnRXhwIiwiZmV0Y2hlciIsInVybCIsImZldGNoIiwidGhlbiIsInJlcyIsImpzb24iLCJpc09ubGluZSIsIm9uTGluZSIsIlNXUkNvbmZpZ0NvbnRleHQiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsInJlamVjdGVkIiwiZG9uZSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib3AiLCJUeXBlRXJyb3IiLCJwb3AiLCJJU19TRVJWRVIiLCJySUMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwidXNlRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwiQ09OQ1VSUkVOVF9QUk9NSVNFUyIsIkNPTkNVUlJFTlRfUFJPTUlTRVNfVFMiLCJGT0NVU19SRVZBTElEQVRPUlMiLCJSRUNPTk5FQ1RfUkVWQUxJREFUT1JTIiwiQ0FDSEVfUkVWQUxJREFUT1JTIiwiTVVUQVRJT05fVFMiLCJNVVRBVElPTl9FTkRfVFMiLCJhZGRFdmVudExpc3RlbmVyIiwicmV2YWxpZGF0ZV8xIiwicmV2YWxpZGF0b3JzIiwidHJpZ2dlciIsInNob3VsZFJldmFsaWRhdGUiLCJrZXlFcnIiLCJrZXlWYWxpZGF0aW5nIiwidXBkYXRlcnMiLCJjdXJyZW50RGF0YSIsImN1cnJlbnRFcnJvciIsImN1cnJlbnRJc1ZhbGlkYXRpbmciLCJwcm9taXNlcyIsImFsbCIsImJyb2FkY2FzdFN0YXRlIiwiZGF0YSIsImVycm9yIiwiaXNWYWxpZGF0aW5nIiwibXV0YXRlIiwiX2RhdGEiLCJiZWZvcmVNdXRhdGlvblRzIiwiYmVmb3JlQ29uY3VycmVudFByb21pc2VzVHMiLCJlcnJfMSIsImVycl8yIiwiX2IiLCJub3ciLCJmbkFyZ3MiLCJhc3NpZ24iLCJ1c2VDb250ZXh0IiwiY29uZmlnUmVmIiwidXNlUmVmIiwicmVzb2x2ZURhdGEiLCJjYWNoZWREYXRhIiwiaW5pdGlhbEVycm9yIiwiaW5pdGlhbElzVmFsaWRhdGluZyIsInN0YXRlRGVwZW5kZW5jaWVzIiwic3RhdGVSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwicmVyZW5kZXIiLCJ1c2VTdGF0ZSIsImRpc3BhdGNoIiwidXNlQ2FsbGJhY2siLCJwYXlsb2FkIiwic2hvdWxkVXBkYXRlU3RhdGUiLCJ1bm1vdW50ZWRSZWYiLCJrZXlSZWYiLCJldmVudHNSZWYiLCJlbWl0IiwiZXZlbnQiLCJwYXJhbXMiLCJib3VuZE11dGF0ZSIsImFkZFJldmFsaWRhdG9yIiwiY2FsbGJhY2siLCJyZW1vdmVSZXZhbGlkYXRvciIsInJldmxpZGF0b3JzIiwicmV2YWxpZGF0ZU9wdHMiLCJsb2FkaW5nIiwic2hvdWxkRGVkdXBpbmciLCJuZXdEYXRhIiwic3RhcnRBdCIsIm5ld1N0YXRlIiwiZXJyXzMiLCJkZWR1cGUiLCJjdXJyZW50SG9va0RhdGEiLCJsYXRlc3RLZXllZERhdGEiLCJzb2Z0UmV2YWxpZGF0ZSIsInJldmFsaWRhdGVPbk1vdW50IiwicGVuZGluZyIsIm9uRm9jdXMiLCJvblJlY29ubmVjdCIsIm9uVXBkYXRlIiwidXBkYXRlZERhdGEiLCJ1cGRhdGVkRXJyb3IiLCJ1cGRhdGVkSXNWYWxpZGF0aW5nIiwibmVlZFVwZGF0ZSIsInRpbWVyIiwidGljayIsImNsZWFyVGltZW91dCIsIm1lbW9pemVkU3RhdGUiLCJ1c2VNZW1vIiwic3RhdGUiLCJsYXRlc3REYXRhIiwibGF0ZXN0RXJyb3IiLCJfX2Fzc2lnbiIsInMiLCJfX3Jlc3QiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInVzZVNXUkluZmluaXRlIiwiZ2V0S2V5IiwiaW5pdGlhbFNpemUiLCJyZXZhbGlkYXRlQWxsIiwiX2MiLCJwZXJzaXN0U2l6ZSIsImRlZmF1bHRGZXRjaGVyIiwiZXh0cmFDb25maWciLCJmaXJzdFBhZ2VLZXkiLCJjb250ZXh0Q2FjaGVLZXkiLCJjYWNoZWRQYWdlU2l6ZSIsInBhZ2VDb3VudENhY2hlS2V5IiwicGFnZUNvdW50UmVmIiwiZGlkTW91bnRSZWYiLCJzd3IiLCJvcmlnaW5hbERhdGEiLCJmb3JjZSIsInByZXZpb3VzUGFnZURhdGEiLCJwYWdlS2V5IiwicGFnZUFyZ3MiLCJwYWdlRGF0YSIsImRhdGFSZWYiLCJzaXplIiwic2V0U2l6ZSJdLCJtYXBwaW5ncyI6IjhGQWVBQSxFQUFPQyxRQWZQLFNBQXlCQyxFQUFLQyxFQUFLQyxH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YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsImZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHNMb29zZTsiLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGluZGV4ID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsIi8qXG5cbkJhc2VkIG9mZiBnbGFtb3IncyBTdHlsZVNoZWV0LCB0aGFua3MgU3VuaWwg4p2k77iPXG5cbmhpZ2ggcGVyZm9ybWFuY2UgU3R5bGVTaGVldCBmb3IgY3NzLWluLWpzIHN5c3RlbXNcblxuLSB1c2VzIG11bHRpcGxlIHN0eWxlIHRhZ3MgYmVoaW5kIHRoZSBzY2VuZXMgZm9yIG1pbGxpb25zIG9mIHJ1bGVzXG4tIHVzZXMgYGluc2VydFJ1bGVgIGZvciBhcHBlbmRpbmcgaW4gcHJvZHVjdGlvbiBmb3IgKm11Y2gqIGZhc3RlciBwZXJmb3JtYW5jZVxuXG4vLyB1c2FnZVxuXG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnXG5cbmxldCBzdHlsZVNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoeyBrZXk6ICcnLCBjb250YWluZXI6IGRvY3VtZW50LmhlYWQgfSlcblxuc3R5bGVTaGVldC5pbnNlcnQoJyNib3ggeyBib3JkZXI6IDFweCBzb2xpZCByZWQ7IH0nKVxuLSBhcHBlbmRzIGEgY3NzIHJ1bGUgaW50byB0aGUgc3R5bGVzaGVldFxuXG5zdHlsZVNoZWV0LmZsdXNoKClcbi0gZW1wdGllcyB0aGUgc3R5bGVzaGVldCBvZiBhbGwgaXRzIGNvbnRlbnRzXG5cbiovXG4vLyAkRmxvd0ZpeE1lXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gdGFnLnNoZWV0O1xuICB9IC8vIHRoaXMgd2VpcmRuZXNzIGJyb3VnaHQgdG8geW91IGJ5IGZpcmVmb3hcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5vd25lck5vZGUgPT09IHRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgb3B0aW9ucy5rZXkpO1xuXG4gIGlmIChvcHRpb25zLm5vbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0YWcuc2V0QXR0cmlidXRlKCdub25jZScsIG9wdGlvbnMubm9uY2UpO1xuICB9XG5cbiAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChvcHRpb25zKSB7XG4gICAgdGhpcy5pc1NwZWVkeSA9IG9wdGlvbnMuc3BlZWR5ID09PSB1bmRlZmluZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIDogb3B0aW9ucy5zcGVlZHk7XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuICAgIHRoaXMubm9uY2UgPSBvcHRpb25zLm5vbmNlOyAvLyBrZXkgaXMgdGhlIHZhbHVlIG9mIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlLCBpdCdzIHVzZWQgdG8gaWRlbnRpZnkgZGlmZmVyZW50IHNoZWV0c1xuXG4gICAgdGhpcy5rZXkgPSBvcHRpb25zLmtleTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyO1xuICAgIHRoaXMuYmVmb3JlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB2YXIgX3RhZyA9IGNyZWF0ZVN0eWxlRWxlbWVudCh0aGlzKTtcblxuICAgICAgdmFyIGJlZm9yZTtcblxuICAgICAgaWYgKHRoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYmVmb3JlID0gdGhpcy5iZWZvcmU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWZvcmUgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lci5pbnNlcnRCZWZvcmUoX3RhZywgYmVmb3JlKTtcbiAgICAgIHRoaXMudGFncy5wdXNoKF90YWcpO1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKHRoaXMuaXNTcGVlZHkpIHtcbiAgICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKHRhZyk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIHRoaXMgaXMgYSByZWFsbHkgaG90IHBhdGhcbiAgICAgICAgLy8gd2UgY2hlY2sgdGhlIHNlY29uZCBjaGFyYWN0ZXIgZmlyc3QgYmVjYXVzZSBoYXZpbmcgXCJpXCJcbiAgICAgICAgLy8gYXMgdGhlIHNlY29uZCBjaGFyYWN0ZXIgd2lsbCBoYXBwZW4gbGVzcyBvZnRlbiB0aGFuXG4gICAgICAgIC8vIGhhdmluZyBcIkBcIiBhcyB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gICAgICAgIHZhciBpc0ltcG9ydFJ1bGUgPSBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNSAmJiBydWxlLmNoYXJDb2RlQXQoMCkgPT09IDY0OyAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG5cbiAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShydWxlLCAvLyB3ZSBuZWVkIHRvIGluc2VydCBAaW1wb3J0IHJ1bGVzIGJlZm9yZSBhbnl0aGluZyBlbHNlXG4gICAgICAgIC8vIG90aGVyd2lzZSB0aGVyZSB3aWxsIGJlIGFuIGVycm9yXG4gICAgICAgIC8vIHRlY2huaWNhbGx5IHRoaXMgbWVhbnMgdGhhdCB0aGUgQGltcG9ydCBydWxlcyB3aWxsXG4gICAgICAgIC8vIF91c3VhbGx5Xyhub3QgYWx3YXlzIHNpbmNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIHN0eWxlIHRhZ3MpXG4gICAgICAgIC8vIGJlIHRoZSBmaXJzdCBvbmVzIGluIHByb2QgYW5kIGdlbmVyYWxseSBsYXRlciBpbiBkZXZcbiAgICAgICAgLy8gdGhpcyBzaG91bGRuJ3QgcmVhbGx5IG1hdHRlciBpbiB0aGUgcmVhbCB3b3JsZCB0aG91Z2hcbiAgICAgICAgLy8gQGltcG9ydCBpcyBnZW5lcmFsbHkgb25seSB1c2VkIGZvciBmb250IGZhY2VzIGZyb20gZ29vZ2xlIGZvbnRzIGFuZCBldGMuXG4gICAgICAgIC8vIHNvIHdoaWxlIHRoaXMgY291bGQgYmUgdGVjaG5pY2FsbHkgY29ycmVjdCB0aGVuIGl0IHdvdWxkIGJlIHNsb3dlciBhbmQgbGFyZ2VyXG4gICAgICAgIC8vIGZvciBhIHRpbnkgYml0IG9mIGNvcnJlY3RuZXNzIHRoYXQgd29uJ3QgbWF0dGVyIGluIHRoZSByZWFsIHdvcmxkXG4gICAgICAgIGlzSW1wb3J0UnVsZSA/IDAgOiBzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRoZXJlIHdhcyBhIHByb2JsZW0gaW5zZXJ0aW5nIHRoZSBmb2xsb3dpbmcgcnVsZTogXFxcIlwiICsgcnVsZSArIFwiXFxcIlwiLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSkpO1xuICAgIH1cblxuICAgIHRoaXMuY3RyKys7XG4gIH07XG5cbiAgX3Byb3RvLmZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHRoaXMudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHJldHVybiB0YWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YWcpO1xuICAgIH0pO1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuZXhwb3J0IHsgU3R5bGVTaGVldCB9O1xuIiwiZnVuY3Rpb24gc3R5bGlzX21pbiAoVykge1xuICBmdW5jdGlvbiBNKGQsIGMsIGUsIGgsIGEpIHtcbiAgICBmb3IgKHZhciBtID0gMCwgYiA9IDAsIHYgPSAwLCBuID0gMCwgcSwgZywgeCA9IDAsIEsgPSAwLCBrLCB1ID0gayA9IHEgPSAwLCBsID0gMCwgciA9IDAsIEkgPSAwLCB0ID0gMCwgQiA9IGUubGVuZ3RoLCBKID0gQiAtIDEsIHksIGYgPSAnJywgcCA9ICcnLCBGID0gJycsIEcgPSAnJywgQzsgbCA8IEI7KSB7XG4gICAgICBnID0gZS5jaGFyQ29kZUF0KGwpO1xuICAgICAgbCA9PT0gSiAmJiAwICE9PSBiICsgbiArIHYgKyBtICYmICgwICE9PSBiICYmIChnID0gNDcgPT09IGIgPyAxMCA6IDQ3KSwgbiA9IHYgPSBtID0gMCwgQisrLCBKKyspO1xuXG4gICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICBpZiAobCA9PT0gSiAmJiAoMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKSwgMCA8IGYudHJpbSgpLmxlbmd0aCkpIHtcbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBmICs9IGUuY2hhckF0KGwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGcgPSA1OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgZiA9IGYudHJpbSgpO1xuICAgICAgICAgICAgcSA9IGYuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIGsgPSAxO1xuXG4gICAgICAgICAgICBmb3IgKHQgPSArK2w7IGwgPCBCOykge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICBrLS07XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh1ID0gbCArIDE7IHUgPCBKOyArK3UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmNoYXJDb2RlQXQodSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQyID09PSBnICYmIDQyID09PSBlLmNoYXJDb2RlQXQodSAtIDEpICYmIGwgKyAyICE9PSB1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQ3ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1O1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgZm9yICg7IGwrKyA8IEogJiYgZS5jaGFyQ29kZUF0KGwpICE9PSBnOykge1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoMCA9PT0gaykgYnJlYWs7XG4gICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgayA9IGUuc3Vic3RyaW5nKHQsIGwpO1xuICAgICAgICAgICAgMCA9PT0gcSAmJiAocSA9IChmID0gZi5yZXBsYWNlKGNhLCAnJykudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgICAgICAgICAgc3dpdGNoIChxKSB7XG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKTtcbiAgICAgICAgICAgICAgICBnID0gZi5jaGFyQ29kZUF0KDEpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICByID0gYztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBPO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIHIsIGssIGcsIGEgKyAxKTtcbiAgICAgICAgICAgICAgICB0ID0gay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgMCA8IEEgJiYgKHIgPSBYKE8sIGYsIEkpLCBDID0gSCgzLCBrLCByLCBjLCBELCB6LCB0LCBnLCBhLCBoKSwgZiA9IHIuam9pbignJyksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAodCA9IChrID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGcgPSAwLCBrID0gJycpKTtcbiAgICAgICAgICAgICAgICBpZiAoMCA8IHQpIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZGEsIGVhKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGZhLCAnJDEgJDInKTtcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBrID0gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoJ0AnICsgaywgMykgPyAnQC13ZWJraXQtJyArIGsgKyAnQCcgKyBrIDogJ0AnICsgaztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgaywgMTEyID09PSBoICYmIChrID0gKHAgKz0gaywgJycpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgayA9ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgayA9IE0oYywgWChjLCBmLCBJKSwgaywgaCwgYSArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGICs9IGs7XG4gICAgICAgICAgICBrID0gSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBmID0gKDAgPCByID8gZi5yZXBsYWNlKE4sICcnKSA6IGYpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICgxIDwgKHQgPSBmLmxlbmd0aCkpIHN3aXRjaCAoMCA9PT0gdSAmJiAocSA9IGYuY2hhckNvZGVBdCgwKSwgNDUgPT09IHEgfHwgOTYgPCBxICYmIDEyMyA+IHEpICYmICh0ID0gKGYgPSBmLnJlcGxhY2UoJyAnLCAnOicpKS5sZW5ndGgpLCAwIDwgQSAmJiB2b2lkIDAgIT09IChDID0gSCgxLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCkpICYmIDAgPT09ICh0ID0gKGYgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZiA9ICdcXHgwMFxceDAwJyksIHEgPSBmLmNoYXJDb2RlQXQoMCksIGcgPSBmLmNoYXJDb2RlQXQoMSksIHEpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgaWYgKDEwNSA9PT0gZyB8fCA5OSA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgRyArPSBmICsgZS5jaGFyQXQobCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA1OCAhPT0gZi5jaGFyQ29kZUF0KHQgLSAxKSAmJiAocCArPSBQKGYsIHEsIGcsIGYuY2hhckNvZGVBdCgyKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgNDcgPT09IGIgPyBiID0gMCA6IDAgPT09IDEgKyBxICYmIDEwNyAhPT0gaCAmJiAwIDwgZi5sZW5ndGggJiYgKHIgPSAxLCBmICs9ICdcXHgwMCcpO1xuICAgICAgICAgIDAgPCBBICogWSAmJiBIKDAsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKTtcbiAgICAgICAgICB6ID0gMTtcbiAgICAgICAgICBEKys7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgICAgIHorKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHorKztcbiAgICAgICAgICB5ID0gZS5jaGFyQXQobCk7XG5cbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgbSArIGIpIHN3aXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgIHkgPSAnJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIDMyICE9PSBnICYmICh5ID0gJyAnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFwwJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXGYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcdic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHIgPSBJID0gMSwgeSA9ICdcXGYnICsgeSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSArIEUgJiYgMCA8IHUpIHN3aXRjaCAobCAtIHUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAxMTIgPT09IHggJiYgNTggPT09IGUuY2hhckNvZGVBdChsIC0gMykgJiYgKEUgPSB4KTtcblxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgIDExMSA9PT0gSyAmJiAoRSA9IEspO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHUgPSBsKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gJiYgKHIgPSAxLCB5ICs9ICdcXHInKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAwID09PSBiICYmIChuID0gbiA9PT0gZyA/IDAgOiAwID09PSBuID8gZyA6IG4pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0rKztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTM6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtLS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgdi0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBxKSBzd2l0Y2ggKDIgKiB4ICsgMyAqIEspIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNTMzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHYrKztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICsgdSArIGsgJiYgKGsgPSAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICBpZiAoISgwIDwgbiArIG0gKyB2KSkgc3dpdGNoIChiKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgc3dpdGNoICgyICogZyArIDMgKiBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjM1OlxuICAgICAgICAgICAgICAgICAgICAgIGIgPSA0NztcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgICAgICAgICAgICB0ID0gbCwgYiA9IDQyO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICA0NyA9PT0gZyAmJiA0MiA9PT0geCAmJiB0ICsgMiAhPT0gbCAmJiAoMzMgPT09IGUuY2hhckNvZGVBdCh0ICsgMikgJiYgKHAgKz0gZS5zdWJzdHJpbmcodCwgbCArIDEpKSwgeSA9ICcnLCBiID0gMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAwID09PSBiICYmIChmICs9IHkpO1xuICAgICAgfVxuXG4gICAgICBLID0geDtcbiAgICAgIHggPSBnO1xuICAgICAgbCsrO1xuICAgIH1cblxuICAgIHQgPSBwLmxlbmd0aDtcblxuICAgIGlmICgwIDwgdCkge1xuICAgICAgciA9IGM7XG4gICAgICBpZiAoMCA8IEEgJiYgKEMgPSBIKDIsIHAsIHIsIGQsIEQsIHosIHQsIGgsIGEsIGgpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHAgPSBDKS5sZW5ndGgpKSByZXR1cm4gRyArIHAgKyBGO1xuICAgICAgcCA9IHIuam9pbignLCcpICsgJ3snICsgcCArICd9JztcblxuICAgICAgaWYgKDAgIT09IHcgKiBFKSB7XG4gICAgICAgIDIgIT09IHcgfHwgTChwLCAyKSB8fCAoRSA9IDApO1xuXG4gICAgICAgIHN3aXRjaCAoRSkge1xuICAgICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShoYSwgJzotbW96LSQxJykgKyBwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoUSwgJzo6LXdlYmtpdC1pbnB1dC0kMScpICsgcC5yZXBsYWNlKFEsICc6Oi1tb3otJDEnKSArIHAucmVwbGFjZShRLCAnOi1tcy1pbnB1dC0kMScpICsgcDtcbiAgICAgICAgfVxuXG4gICAgICAgIEUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBHICsgcCArIEY7XG4gIH1cblxuICBmdW5jdGlvbiBYKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMudHJpbSgpLnNwbGl0KGlhKTtcbiAgICBjID0gaDtcbiAgICB2YXIgYSA9IGgubGVuZ3RoLFxuICAgICAgICBtID0gZC5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdmFyIGIgPSAwO1xuXG4gICAgICAgIGZvciAoZCA9IDAgPT09IG0gPyAnJyA6IGRbMF0gKyAnICc7IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBjW2JdID0gWihkLCBjW2JdLCBlKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIHYgPSBiID0gMDtcblxuICAgICAgICBmb3IgKGMgPSBbXTsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgbTsgKytuKSB7XG4gICAgICAgICAgICBjW3YrK10gPSBaKGRbbl0gKyAnICcsIGhbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gWihkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgMzMgPiBoICYmIChoID0gKGMgPSBjLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICBzd2l0Y2ggKGgpIHtcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIHJldHVybiBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgY2FzZSA1ODpcbiAgICAgICAgcmV0dXJuIGQudHJpbSgpICsgYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICgwIDwgMSAqIGUgJiYgMCA8IGMuaW5kZXhPZignXFxmJykpIHJldHVybiBjLnJlcGxhY2UoRiwgKDU4ID09PSBkLmNoYXJDb2RlQXQoMCkgPyAnJyA6ICckMScpICsgZC50cmltKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBkICsgYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFAoZCwgYywgZSwgaCkge1xuICAgIHZhciBhID0gZCArICc7JyxcbiAgICAgICAgbSA9IDIgKiBjICsgMyAqIGUgKyA0ICogaDtcblxuICAgIGlmICg5NDQgPT09IG0pIHtcbiAgICAgIGQgPSBhLmluZGV4T2YoJzonLCA5KSArIDE7XG4gICAgICB2YXIgYiA9IGEuc3Vic3RyaW5nKGQsIGEubGVuZ3RoIC0gMSkudHJpbSgpO1xuICAgICAgYiA9IGEuc3Vic3RyaW5nKDAsIGQpLnRyaW0oKSArIGIgKyAnOyc7XG4gICAgICByZXR1cm4gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoYiwgMSkgPyAnLXdlYmtpdC0nICsgYiArIGIgOiBiO1xuICAgIH1cblxuICAgIGlmICgwID09PSB3IHx8IDIgPT09IHcgJiYgIUwoYSwgMSkpIHJldHVybiBhO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDEwMTU6XG4gICAgICAgIHJldHVybiA5NyA9PT0gYS5jaGFyQ29kZUF0KDEwKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTUxOlxuICAgICAgICByZXR1cm4gMTE2ID09PSBhLmNoYXJDb2RlQXQoMykgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk2MzpcbiAgICAgICAgcmV0dXJuIDExMCA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSAxMDA5OlxuICAgICAgICBpZiAoMTAwICE9PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2OTpcbiAgICAgIGNhc2UgOTQyOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk3ODpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMTk6XG4gICAgICBjYXNlIDk4MzpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA4ODM6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDgpKSByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuICAgICAgICBpZiAoMCA8IGEuaW5kZXhPZignaW1hZ2Utc2V0KCcsIDExKSkgcmV0dXJuIGEucmVwbGFjZShqYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMyOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg0KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNSkpIHtcbiAgICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtJyArIGEucmVwbGFjZSgnLWdyb3cnLCAnJykgKyAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnZ3JvdycsICdwb3NpdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdiYXNpcycsICdwcmVmZXJyZWQtc2l6ZScpICsgYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5NjQ6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAyMzpcbiAgICAgICAgaWYgKDk5ICE9PSBhLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuICAgICAgICBiID0gYS5zdWJzdHJpbmcoYS5pbmRleE9mKCc6JywgMTUpKS5yZXBsYWNlKCdmbGV4LScsICcnKS5yZXBsYWNlKCdzcGFjZS1iZXR3ZWVuJywgJ2p1c3RpZnknKTtcbiAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC1wYWNrJyArIGIgKyAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1wYWNrJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMDU6XG4gICAgICAgIHJldHVybiBrYS50ZXN0KGEpID8gYS5yZXBsYWNlKGFhLCAnOi13ZWJraXQtJykgKyBhLnJlcGxhY2UoYWEsICc6LW1vei0nKSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDFlMzpcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKDEzKS50cmltKCk7XG4gICAgICAgIGMgPSBiLmluZGV4T2YoJy0nKSArIDE7XG5cbiAgICAgICAgc3dpdGNoIChiLmNoYXJDb2RlQXQoMCkgKyBiLmNoYXJDb2RlQXQoYykpIHtcbiAgICAgICAgICBjYXNlIDIyNjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjMyOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGItcmwnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICdscicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDE3OlxuICAgICAgICBpZiAoLTEgPT09IGEuaW5kZXhPZignc3RpY2t5JywgOSkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3NTpcbiAgICAgICAgYyA9IChhID0gZCkubGVuZ3RoIC0gMTA7XG4gICAgICAgIGIgPSAoMzMgPT09IGEuY2hhckNvZGVBdChjKSA/IGEuc3Vic3RyaW5nKDAsIGMpIDogYSkuc3Vic3RyaW5nKGQuaW5kZXhPZignOicsIDcpICsgMSkudHJpbSgpO1xuXG4gICAgICAgIHN3aXRjaCAobSA9IGIuY2hhckNvZGVBdCgwKSArIChiLmNoYXJDb2RlQXQoNykgfCAwKSkge1xuICAgICAgICAgIGNhc2UgMjAzOlxuICAgICAgICAgICAgaWYgKDExMSA+IGIuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMDc6XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyAoMTAyIDwgbSA/ICdpbmxpbmUtJyA6ICcnKSArICdib3gnKSArICc7JyArIGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy1tcy0nICsgYiArICdib3gnKSArICc7JyArIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYSArICc7JztcblxuICAgICAgY2FzZSA5Mzg6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDUpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg2KSkge1xuICAgICAgICAgIGNhc2UgMTA1OlxuICAgICAgICAgICAgcmV0dXJuIGIgPSBhLnJlcGxhY2UoJy1pdGVtcycsICcnKSwgJy13ZWJraXQtJyArIGEgKyAnLXdlYmtpdC1ib3gtJyArIGIgKyAnLW1zLWZsZXgtJyArIGIgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtaXRlbS0nICsgYS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1saW5lLXBhY2snICsgYS5yZXBsYWNlKCdhbGlnbi1jb250ZW50JywgJycpLnJlcGxhY2UoYmEsICcnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTczOlxuICAgICAgY2FzZSA5ODk6XG4gICAgICAgIGlmICg0NSAhPT0gYS5jaGFyQ29kZUF0KDMpIHx8IDEyMiA9PT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5MzE6XG4gICAgICBjYXNlIDk1MzpcbiAgICAgICAgaWYgKCEwID09PSBsYS50ZXN0KGQpKSByZXR1cm4gMTE1ID09PSAoYiA9IGQuc3Vic3RyaW5nKGQuaW5kZXhPZignOicpICsgMSkpLmNoYXJDb2RlQXQoMCkgPyBQKGQucmVwbGFjZSgnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBjLCBlLCBoKS5yZXBsYWNlKCc6ZmlsbC1hdmFpbGFibGUnLCAnOnN0cmV0Y2gnKSA6IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyBhLnJlcGxhY2UoYiwgJy1tb3otJyArIGIucmVwbGFjZSgnZmlsbC0nLCAnJykpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTYyOlxuICAgICAgICBpZiAoYSA9ICctd2Via2l0LScgKyBhICsgKDEwMiA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy1tcy0nICsgYSA6ICcnKSArIGEsIDIxMSA9PT0gZSArIGggJiYgMTA1ID09PSBhLmNoYXJDb2RlQXQoMTMpICYmIDAgPCBhLmluZGV4T2YoJ3RyYW5zZm9ybScsIDEwKSkgcmV0dXJuIGEuc3Vic3RyaW5nKDAsIGEuaW5kZXhPZignOycsIDI3KSArIDEpLnJlcGxhY2UobWEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICBmdW5jdGlvbiBMKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQuaW5kZXhPZigxID09PSBjID8gJzonIDogJ3snKSxcbiAgICAgICAgaCA9IGQuc3Vic3RyaW5nKDAsIDMgIT09IGMgPyBlIDogMTApO1xuICAgIGUgPSBkLnN1YnN0cmluZyhlICsgMSwgZC5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gUigyICE9PSBjID8gaCA6IGgucmVwbGFjZShuYSwgJyQxJyksIGUsIGMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZWEoZCwgYykge1xuICAgIHZhciBlID0gUChjLCBjLmNoYXJDb2RlQXQoMCksIGMuY2hhckNvZGVBdCgxKSwgYy5jaGFyQ29kZUF0KDIpKTtcbiAgICByZXR1cm4gZSAhPT0gYyArICc7JyA/IGUucmVwbGFjZShvYSwgJyBvciAoJDEpJykuc3Vic3RyaW5nKDQpIDogJygnICsgYyArICcpJztcbiAgfVxuXG4gIGZ1bmN0aW9uIEgoZCwgYywgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkge1xuICAgIGZvciAodmFyIGcgPSAwLCB4ID0gYywgdzsgZyA8IEE7ICsrZykge1xuICAgICAgc3dpdGNoICh3ID0gU1tnXS5jYWxsKEIsIGQsIHgsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICBjYXNlICExOlxuICAgICAgICBjYXNlICEwOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB4ID0gdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoeCAhPT0gYykgcmV0dXJuIHg7XG4gIH1cblxuICBmdW5jdGlvbiBUKGQpIHtcbiAgICBzd2l0Y2ggKGQpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgY2FzZSBudWxsOlxuICAgICAgICBBID0gUy5sZW5ndGggPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBkKSBTW0ErK10gPSBkO2Vsc2UgaWYgKCdvYmplY3QnID09PSB0eXBlb2YgZCkgZm9yICh2YXIgYyA9IDAsIGUgPSBkLmxlbmd0aDsgYyA8IGU7ICsrYykge1xuICAgICAgICAgIFQoZFtjXSk7XG4gICAgICAgIH0gZWxzZSBZID0gISFkIHwgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gVDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFUoZCkge1xuICAgIGQgPSBkLnByZWZpeDtcbiAgICB2b2lkIDAgIT09IGQgJiYgKFIgPSBudWxsLCBkID8gJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGQgPyB3ID0gMSA6ICh3ID0gMiwgUiA9IGQpIDogdyA9IDApO1xuICAgIHJldHVybiBVO1xuICB9XG5cbiAgZnVuY3Rpb24gQihkLCBjKSB7XG4gICAgdmFyIGUgPSBkO1xuICAgIDMzID4gZS5jaGFyQ29kZUF0KDApICYmIChlID0gZS50cmltKCkpO1xuICAgIFYgPSBlO1xuICAgIGUgPSBbVl07XG5cbiAgICBpZiAoMCA8IEEpIHtcbiAgICAgIHZhciBoID0gSCgtMSwgYywgZSwgZSwgRCwgeiwgMCwgMCwgMCwgMCk7XG4gICAgICB2b2lkIDAgIT09IGggJiYgJ3N0cmluZycgPT09IHR5cGVvZiBoICYmIChjID0gaCk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBNKE8sIGUsIGMsIDAsIDApO1xuICAgIDAgPCBBICYmIChoID0gSCgtMiwgYSwgZSwgZSwgRCwgeiwgYS5sZW5ndGgsIDAsIDAsIDApLCB2b2lkIDAgIT09IGggJiYgKGEgPSBoKSk7XG4gICAgViA9ICcnO1xuICAgIEUgPSAwO1xuICAgIHogPSBEID0gMTtcbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIHZhciBjYSA9IC9eXFwwKy9nLFxuICAgICAgTiA9IC9bXFwwXFxyXFxmXS9nLFxuICAgICAgYWEgPSAvOiAqL2csXG4gICAgICBrYSA9IC96b298Z3JhLyxcbiAgICAgIG1hID0gLyhbLDogXSkodHJhbnNmb3JtKS9nLFxuICAgICAgaWEgPSAvLFxccis/L2csXG4gICAgICBGID0gLyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csXG4gICAgICBmYSA9IC9AKGtcXHcrKVxccyooXFxTKilcXHMqLyxcbiAgICAgIFEgPSAvOjoocGxhY2UpL2csXG4gICAgICBoYSA9IC86KHJlYWQtb25seSkvZyxcbiAgICAgIEcgPSAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sXG4gICAgICBkYSA9IC9cXChcXHMqKC4qKVxccypcXCkvZyxcbiAgICAgIG9hID0gLyhbXFxzXFxTXSo/KTsvZyxcbiAgICAgIGJhID0gLy1zZWxmfGZsZXgtL2csXG4gICAgICBuYSA9IC9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxcbiAgICAgIGxhID0gL3N0cmV0Y2h8OlxccypcXHcrXFwtKD86Y29udGV8YXZhaWwpLyxcbiAgICAgIGphID0gLyhbXi1dKShpbWFnZS1zZXRcXCgpLyxcbiAgICAgIHogPSAxLFxuICAgICAgRCA9IDEsXG4gICAgICBFID0gMCxcbiAgICAgIHcgPSAxLFxuICAgICAgTyA9IFtdLFxuICAgICAgUyA9IFtdLFxuICAgICAgQSA9IDAsXG4gICAgICBSID0gbnVsbCxcbiAgICAgIFkgPSAwLFxuICAgICAgViA9ICcnO1xuICBCLnVzZSA9IFQ7XG4gIEIuc2V0ID0gVTtcbiAgdm9pZCAwICE9PSBXICYmIFUoVyk7XG4gIHJldHVybiBCO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsaXNfbWluO1xuIiwiaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0JztcbmltcG9ydCBTdHlsaXMgZnJvbSAnQGVtb3Rpb24vc3R5bGlzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RoeXN1bHRhbi9zdHlsaXMuanMvdHJlZS9tYXN0ZXIvcGx1Z2lucy9ydWxlLXNoZWV0XG4vLyBpbmxpbmVkIHRvIGF2b2lkIHVtZCB3cmFwcGVyIGFuZCBwZWVyRGVwIHdhcm5pbmdzL2luc3RhbGxpbmcgc3R5bGlzXG4vLyBzaW5jZSB3ZSB1c2Ugc3R5bGlzIGFmdGVyIGNsb3N1cmUgY29tcGlsZXJcbnZhciBkZWxpbWl0ZXIgPSAnLyp8Ki8nO1xudmFyIG5lZWRsZSA9IGRlbGltaXRlciArICd9JztcblxuZnVuY3Rpb24gdG9TaGVldChibG9jaykge1xuICBpZiAoYmxvY2spIHtcbiAgICBTaGVldC5jdXJyZW50Lmluc2VydChibG9jayArICd9Jyk7XG4gIH1cbn1cblxudmFyIFNoZWV0ID0ge1xuICBjdXJyZW50OiBudWxsXG59O1xudmFyIHJ1bGVTaGVldCA9IGZ1bmN0aW9uIHJ1bGVTaGVldChjb250ZXh0LCBjb250ZW50LCBzZWxlY3RvcnMsIHBhcmVudHMsIGxpbmUsIGNvbHVtbiwgbGVuZ3RoLCBucywgZGVwdGgsIGF0KSB7XG4gIHN3aXRjaCAoY29udGV4dCkge1xuICAgIC8vIHByb3BlcnR5XG4gICAgY2FzZSAxOlxuICAgICAge1xuICAgICAgICBzd2l0Y2ggKGNvbnRlbnQuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIEBpbXBvcnRcbiAgICAgICAgICAgICAgU2hlZXQuY3VycmVudC5pbnNlcnQoY29udGVudCArICc7Jyk7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvLyBjaGFyY29kZSBmb3IgbFxuXG4gICAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIGNoYXJjb2RlIGZvciBiXG4gICAgICAgICAgICAgIC8vIHRoaXMgaWdub3JlcyBsYWJlbFxuICAgICAgICAgICAgICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDIpID09PSA5OCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgLy8gc2VsZWN0b3JcblxuICAgIGNhc2UgMjpcbiAgICAgIHtcbiAgICAgICAgaWYgKG5zID09PSAwKSByZXR1cm4gY29udGVudCArIGRlbGltaXRlcjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgLy8gYXQtcnVsZVxuXG4gICAgY2FzZSAzOlxuICAgICAge1xuICAgICAgICBzd2l0Y2ggKG5zKSB7XG4gICAgICAgICAgLy8gQGZvbnQtZmFjZSwgQHBhZ2VcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgU2hlZXQuY3VycmVudC5pbnNlcnQoc2VsZWN0b3JzWzBdICsgY29udGVudCk7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJldHVybiBjb250ZW50ICsgKGF0ID09PSAwID8gZGVsaW1pdGVyIDogJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICBjYXNlIC0yOlxuICAgICAge1xuICAgICAgICBjb250ZW50LnNwbGl0KG5lZWRsZSkuZm9yRWFjaCh0b1NoZWV0KTtcbiAgICAgIH1cbiAgfVxufTtcblxudmFyIGNyZWF0ZUNhY2hlID0gZnVuY3Rpb24gY3JlYXRlQ2FjaGUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSBvcHRpb25zID0ge307XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleSB8fCAnY3NzJztcbiAgdmFyIHN0eWxpc09wdGlvbnM7XG5cbiAgaWYgKG9wdGlvbnMucHJlZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsaXNPcHRpb25zID0ge1xuICAgICAgcHJlZml4OiBvcHRpb25zLnByZWZpeFxuICAgIH07XG4gIH1cblxuICB2YXIgc3R5bGlzID0gbmV3IFN0eWxpcyhzdHlsaXNPcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc2VydGVkID0ge307IC8vICRGbG93Rml4TWVcblxuICB2YXIgY29udGFpbmVyO1xuXG4gIHtcbiAgICBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb24tXCIgKyBrZXkgKyBcIl1cIik7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBhdHRyaWIgPSBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtZW1vdGlvbi1cIiArIGtleSk7IC8vICRGbG93Rml4TWVcblxuICAgICAgYXR0cmliLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaW5zZXJ0ZWRbaWRdID0gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBjb250YWluZXIpIHtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9pbnNlcnQ7XG5cbiAge1xuICAgIHN0eWxpcy51c2Uob3B0aW9ucy5zdHlsaXNQbHVnaW5zKShydWxlU2hlZXQpO1xuXG4gICAgX2luc2VydCA9IGZ1bmN0aW9uIGluc2VydChzZWxlY3Rvciwgc2VyaWFsaXplZCwgc2hlZXQsIHNob3VsZENhY2hlKSB7XG4gICAgICB2YXIgbmFtZSA9IHNlcmlhbGl6ZWQubmFtZTtcbiAgICAgIFNoZWV0LmN1cnJlbnQgPSBzaGVldDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgbWFwID0gc2VyaWFsaXplZC5tYXA7XG4gICAgICAgIFNoZWV0LmN1cnJlbnQgPSB7XG4gICAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgICAgICAgICAgc2hlZXQuaW5zZXJ0KHJ1bGUgKyBtYXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3R5bGlzKHNlbGVjdG9yLCBzZXJpYWxpemVkLnN0eWxlcyk7XG5cbiAgICAgIGlmIChzaG91bGRDYWNoZSkge1xuICAgICAgICBjYWNoZS5pbnNlcnRlZFtuYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmY3MzcxYTRjZDdlNjAwOWVmNjFkMGFcbiAgICB2YXIgY29tbWVudFN0YXJ0ID0gL1xcL1xcKi9nO1xuICAgIHZhciBjb21tZW50RW5kID0gL1xcKlxcLy9nO1xuICAgIHN0eWxpcy51c2UoZnVuY3Rpb24gKGNvbnRleHQsIGNvbnRlbnQpIHtcbiAgICAgIHN3aXRjaCAoY29udGV4dCkge1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHdoaWxlIChjb21tZW50U3RhcnQudGVzdChjb250ZW50KSkge1xuICAgICAgICAgICAgICBjb21tZW50RW5kLmxhc3RJbmRleCA9IGNvbW1lbnRTdGFydC5sYXN0SW5kZXg7XG5cbiAgICAgICAgICAgICAgaWYgKGNvbW1lbnRFbmQudGVzdChjb250ZW50KSkge1xuICAgICAgICAgICAgICAgIGNvbW1lbnRTdGFydC5sYXN0SW5kZXggPSBjb21tZW50RW5kLmxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91ciBzdHlsZXMgaGF2ZSBhbiB1bnRlcm1pbmF0ZWQgY29tbWVudCAoXCIvKlwiIHdpdGhvdXQgY29ycmVzcG9uZGluZyBcIiovXCIpLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb21tZW50U3RhcnQubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBzdHlsaXMudXNlKGZ1bmN0aW9uIChjb250ZXh0LCBjb250ZW50LCBzZWxlY3RvcnMpIHtcbiAgICAgIHN3aXRjaCAoY29udGV4dCkge1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBmbGFnID0gJ2Vtb3Rpb24tZGlzYWJsZS1zZXJ2ZXItcmVuZGVyaW5nLXVuc2FmZS1zZWxlY3Rvci13YXJuaW5nLXBsZWFzZS1kby1ub3QtdXNlLXRoaXMtdGhlLXdhcm5pbmctZXhpc3RzLWZvci1hLXJlYXNvbic7XG4gICAgICAgICAgICB2YXIgdW5zYWZlUHNldWRvQ2xhc3NlcyA9IGNvbnRlbnQubWF0Y2goLyg6Zmlyc3R8Om50aHw6bnRoLWxhc3QpLWNoaWxkL2cpO1xuXG4gICAgICAgICAgICBpZiAodW5zYWZlUHNldWRvQ2xhc3NlcyAmJiBjYWNoZS5jb21wYXQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgdW5zYWZlUHNldWRvQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh1bnNhZmVQc2V1ZG9DbGFzcykge1xuICAgICAgICAgICAgICAgIHZhciBpZ25vcmVSZWdFeHAgPSBuZXcgUmVnRXhwKHVuc2FmZVBzZXVkb0NsYXNzICsgXCIuKlxcXFwvXFxcXCogXCIgKyBmbGFnICsgXCIgXFxcXCpcXFxcL1wiKTtcbiAgICAgICAgICAgICAgICB2YXIgaWdub3JlID0gaWdub3JlUmVnRXhwLnRlc3QoY29udGVudCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodW5zYWZlUHNldWRvQ2xhc3MgJiYgIWlnbm9yZSkge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZSBwc2V1ZG8gY2xhc3MgXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3MgKyBcIlxcXCIgaXMgcG90ZW50aWFsbHkgdW5zYWZlIHdoZW4gZG9pbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLiBUcnkgY2hhbmdpbmcgaXQgdG8gXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3Muc3BsaXQoJy1jaGlsZCcpWzBdICsgXCItb2YtdHlwZVxcXCIuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IHtcbiAgICBrZXk6IGtleSxcbiAgICBzaGVldDogbmV3IFN0eWxlU2hlZXQoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgICAgc3BlZWR5OiBvcHRpb25zLnNwZWVkeVxuICAgIH0pLFxuICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgIGluc2VydGVkOiBpbnNlcnRlZCxcbiAgICByZWdpc3RlcmVkOiB7fSxcbiAgICBpbnNlcnQ6IF9pbnNlcnRcbiAgfTtcbiAgcmV0dXJuIGNhY2hlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ2FjaGU7XG4iLCJ2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7XG5mdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZXMpIHtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9ICcnO1xuICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWdpc3RlcmVkU3R5bGVzLnB1c2gocmVnaXN0ZXJlZFtjbGFzc05hbWVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmF3Q2xhc3NOYW1lICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByYXdDbGFzc05hbWU7XG59XG52YXIgaW5zZXJ0U3R5bGVzID0gZnVuY3Rpb24gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKCAvLyB3ZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgaWYgdGhlXG4gIC8vIGNsYXNzIG5hbWUgY291bGQgYmUgdXNlZCBmdXJ0aGVyIGRvd25cbiAgLy8gdGhlIHRyZWUgYnV0IGlmIGl0J3MgYSBzdHJpbmcgdGFnLCB3ZSBrbm93IGl0IHdvbid0XG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gYWRkIGl0IHRvIHJlZ2lzdGVyZWQgY2FjaGUuXG4gIC8vIHRoaXMgaW1wcm92ZXMgbWVtb3J5IHVzYWdlIHNpbmNlIHdlIGNhbiBhdm9pZCBzdG9yaW5nIHRoZSB3aG9sZSBzdHlsZSBzdHJpbmdcbiAgKGlzU3RyaW5nVGFnID09PSBmYWxzZSB8fCAvLyB3ZSBuZWVkIHRvIGFsd2F5cyBzdG9yZSBpdCBpZiB3ZSdyZSBpbiBjb21wYXQgbW9kZSBhbmRcbiAgLy8gaW4gbm9kZSBzaW5jZSBlbW90aW9uLXNlcnZlciByZWxpZXMgb24gd2hldGhlciBhIHN0eWxlIGlzIGluXG4gIC8vIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIGtub3cgd2hldGhlciBhIHN0eWxlIGlzIGdsb2JhbCBvciBub3RcbiAgLy8gYWxzbywgbm90ZSB0aGF0IHRoaXMgY2hlY2sgd2lsbCBiZSBkZWFkIGNvZGUgZWxpbWluYXRlZCBpbiB0aGUgYnJvd3NlclxuICBpc0Jyb3dzZXIgPT09IGZhbHNlICYmIGNhY2hlLmNvbXBhdCAhPT0gdW5kZWZpbmVkKSAmJiBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9IHNlcmlhbGl6ZWQuc3R5bGVzO1xuICB9XG5cbiAgaWYgKGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBjdXJyZW50ID0gc2VyaWFsaXplZDtcblxuICAgIGRvIHtcbiAgICAgIHZhciBtYXliZVN0eWxlcyA9IGNhY2hlLmluc2VydChcIi5cIiArIGNsYXNzTmFtZSwgY3VycmVudCwgY2FjaGUuc2hlZXQsIHRydWUpO1xuXG4gICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgIH0gd2hpbGUgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcyB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvbXVybXVyaGFzaC1qc1xuLy8gUG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FhcHBsZWJ5L3NtaGFzaGVyL2Jsb2IvNjFhMDUzMGYyODI3N2YyZTg1MGJmYzM5NjAwY2U2MWQwMmI1MThkZS9zcmMvTXVybXVySGFzaDIuY3BwI0wzNy1MODZcbmZ1bmN0aW9uIG11cm11cjIoc3RyKSB7XG4gIC8vICdtJyBhbmQgJ3InIGFyZSBtaXhpbmcgY29uc3RhbnRzIGdlbmVyYXRlZCBvZmZsaW5lLlxuICAvLyBUaGV5J3JlIG5vdCByZWFsbHkgJ21hZ2ljJywgdGhleSBqdXN0IGhhcHBlbiB0byB3b3JrIHdlbGwuXG4gIC8vIGNvbnN0IG0gPSAweDViZDFlOTk1O1xuICAvLyBjb25zdCByID0gMjQ7XG4gIC8vIEluaXRpYWxpemUgdGhlIGhhc2hcbiAgdmFyIGggPSAwOyAvLyBNaXggNCBieXRlcyBhdCBhIHRpbWUgaW50byB0aGUgaGFzaFxuXG4gIHZhciBrLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW4gPSBzdHIubGVuZ3RoO1xuXG4gIGZvciAoOyBsZW4gPj0gNDsgKytpLCBsZW4gLT0gNCkge1xuICAgIGsgPSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDggfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDE2IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAyNDtcbiAgICBrID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgICBrIF49XG4gICAgLyogayA+Pj4gcjogKi9cbiAgICBrID4+PiAyNDtcbiAgICBoID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KSBeXG4gICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gSGFuZGxlIHRoZSBsYXN0IGZldyBieXRlcyBvZiB0aGUgaW5wdXQgYXJyYXlcblxuXG4gIHN3aXRjaCAobGVuKSB7XG4gICAgY2FzZSAzOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDIpICYgMHhmZikgPDwgMTY7XG5cbiAgICBjYXNlIDI6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZmKSA8PCA4O1xuXG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmY7XG4gICAgICBoID1cbiAgICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gRG8gYSBmZXcgZmluYWwgbWl4ZXMgb2YgdGhlIGhhc2ggdG8gZW5zdXJlIHRoZSBsYXN0IGZld1xuICAvLyBieXRlcyBhcmUgd2VsbC1pbmNvcnBvcmF0ZWQuXG5cblxuICBoIF49IGggPj4+IDEzO1xuICBoID1cbiAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICByZXR1cm4gKChoIF4gaCA+Pj4gMTUpID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG11cm11cjI7XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiaW1wb3J0IGhhc2hTdHJpbmcgZnJvbSAnQGVtb3Rpb24vaGFzaCc7XG5pbXBvcnQgdW5pdGxlc3MgZnJvbSAnQGVtb3Rpb24vdW5pdGxlc3MnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciBJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUiA9IFwiWW91IGhhdmUgaWxsZWdhbCBlc2NhcGUgc2VxdWVuY2UgaW4geW91ciB0ZW1wbGF0ZSBsaXRlcmFsLCBtb3N0IGxpa2VseSBpbnNpZGUgY29udGVudCdzIHByb3BlcnR5IHZhbHVlLlxcbkJlY2F1c2UgeW91IHdyaXRlIHlvdXIgQ1NTIGluc2lkZSBhIEphdmFTY3JpcHQgc3RyaW5nIHlvdSBhY3R1YWxseSBoYXZlIHRvIGRvIGRvdWJsZSBlc2NhcGluZywgc28gZm9yIGV4YW1wbGUgXFxcImNvbnRlbnQ6ICdcXFxcMDBkNyc7XFxcIiBzaG91bGQgYmVjb21lIFxcXCJjb250ZW50OiAnXFxcXFxcXFwwMGQ3JztcXFwiLlxcbllvdSBjYW4gcmVhZCBtb3JlIGFib3V0IHRoaXMgaGVyZTpcXG5odHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9UZW1wbGF0ZV9saXRlcmFscyNFUzIwMThfcmV2aXNpb25fb2ZfaWxsZWdhbF9lc2NhcGVfc2VxdWVuY2VzXCI7XG52YXIgVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IgPSBcIllvdSBoYXZlIHBhc3NlZCBpbiBmYWxzeSB2YWx1ZSBhcyBzdHlsZSBvYmplY3QncyBrZXkgKGNhbiBoYXBwZW4gd2hlbiBpbiBleGFtcGxlIHlvdSBwYXNzIHVuZXhwb3J0ZWQgY29tcG9uZW50IGFzIGNvbXB1dGVkIGtleSkuXCI7XG52YXIgaHlwaGVuYXRlUmVnZXggPSAvW0EtWl18Xm1zL2c7XG52YXIgYW5pbWF0aW9uUmVnZXggPSAvX0VNT18oW15fXSs/KV8oW15dKj8pX0VNT18vZztcblxudmFyIGlzQ3VzdG9tUHJvcGVydHkgPSBmdW5jdGlvbiBpc0N1c3RvbVByb3BlcnR5KHByb3BlcnR5KSB7XG4gIHJldHVybiBwcm9wZXJ0eS5jaGFyQ29kZUF0KDEpID09PSA0NTtcbn07XG5cbnZhciBpc1Byb2Nlc3NhYmxlVmFsdWUgPSBmdW5jdGlvbiBpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbic7XG59O1xuXG52YXIgcHJvY2Vzc1N0eWxlTmFtZSA9IG1lbW9pemUoZnVuY3Rpb24gKHN0eWxlTmFtZSkge1xuICByZXR1cm4gaXNDdXN0b21Qcm9wZXJ0eShzdHlsZU5hbWUpID8gc3R5bGVOYW1lIDogc3R5bGVOYW1lLnJlcGxhY2UoaHlwaGVuYXRlUmVnZXgsICctJCYnKS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbnZhciBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlICdhbmltYXRpb24nOlxuICAgIGNhc2UgJ2FuaW1hdGlvbk5hbWUnOlxuICAgICAge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKGFuaW1hdGlvblJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIHAxLCBwMikge1xuICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICBuYW1lOiBwMSxcbiAgICAgICAgICAgICAgc3R5bGVzOiBwMixcbiAgICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHAxO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gIH1cblxuICBpZiAodW5pdGxlc3Nba2V5XSAhPT0gMSAmJiAhaXNDdXN0b21Qcm9wZXJ0eShrZXkpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGNvbnRlbnRWYWx1ZVBhdHRlcm4gPSAvKGF0dHJ8Y2FsY3xjb3VudGVycz98dXJsKVxcKC87XG4gIHZhciBjb250ZW50VmFsdWVzID0gWydub3JtYWwnLCAnbm9uZScsICdjb3VudGVyJywgJ29wZW4tcXVvdGUnLCAnY2xvc2UtcXVvdGUnLCAnbm8tb3Blbi1xdW90ZScsICduby1jbG9zZS1xdW90ZScsICdpbml0aWFsJywgJ2luaGVyaXQnLCAndW5zZXQnXTtcbiAgdmFyIG9sZFByb2Nlc3NTdHlsZVZhbHVlID0gcHJvY2Vzc1N0eWxlVmFsdWU7XG4gIHZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuICB2YXIgaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG4gIHZhciBoeXBoZW5hdGVkQ2FjaGUgPSB7fTtcblxuICBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IGNvbnRlbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xICYmICFjb250ZW50VmFsdWVQYXR0ZXJuLnRlc3QodmFsdWUpICYmICh2YWx1ZS5jaGFyQXQoMCkgIT09IHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSB8fCB2YWx1ZS5jaGFyQXQoMCkgIT09ICdcIicgJiYgdmFsdWUuY2hhckF0KDApICE9PSBcIidcIikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSBzZWVtIHRvIGJlIHVzaW5nIGEgdmFsdWUgZm9yICdjb250ZW50JyB3aXRob3V0IHF1b3RlcywgdHJ5IHJlcGxhY2luZyBpdCB3aXRoIGBjb250ZW50OiAnXFxcIlwiICsgdmFsdWUgKyBcIlxcXCInYFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJvY2Vzc2VkID0gb2xkUHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSk7XG5cbiAgICBpZiAocHJvY2Vzc2VkICE9PSAnJyAmJiAhaXNDdXN0b21Qcm9wZXJ0eShrZXkpICYmIGtleS5pbmRleE9mKCctJykgIT09IC0xICYmIGh5cGhlbmF0ZWRDYWNoZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGh5cGhlbmF0ZWRDYWNoZVtrZXldID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVc2luZyBrZWJhYi1jYXNlIGZvciBjc3MgcHJvcGVydGllcyBpbiBvYmplY3RzIGlzIG5vdCBzdXBwb3J0ZWQuIERpZCB5b3UgbWVhbiBcIiArIGtleS5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpLnJlcGxhY2UoaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24gKHN0ciwgX2NoYXIpIHtcbiAgICAgICAgcmV0dXJuIF9jaGFyLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9KSArIFwiP1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkO1xuICB9O1xufVxuXG52YXIgc2hvdWxkV2FybkFib3V0SW50ZXJwb2xhdGluZ0NsYXNzTmFtZUZyb21Dc3MgPSB0cnVlO1xuXG5mdW5jdGlvbiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uLCBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uKSB7XG4gIGlmIChpbnRlcnBvbGF0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAoaW50ZXJwb2xhdGlvbi5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLnRvU3RyaW5nKCkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGJhYmVsLXBsdWdpbi1lbW90aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlb2YgaW50ZXJwb2xhdGlvbikge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAge1xuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5hbmltID09PSAxKSB7XG4gICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgbmFtZTogaW50ZXJwb2xhdGlvbi5uYW1lLFxuICAgICAgICAgICAgc3R5bGVzOiBpbnRlcnBvbGF0aW9uLnN0eWxlcyxcbiAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIGludGVycG9sYXRpb24ubmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBpbnRlcnBvbGF0aW9uLm5leHQ7XG5cbiAgICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBub3QgdGhlIG1vc3QgZWZmaWNpZW50IHRoaW5nIGV2ZXIgYnV0IHRoaXMgaXMgYSBwcmV0dHkgcmFyZSBjYXNlXG4gICAgICAgICAgICAvLyBhbmQgdGhlcmUgd2lsbCBiZSB2ZXJ5IGZldyBpdGVyYXRpb25zIG9mIHRoaXMgZ2VuZXJhbGx5XG4gICAgICAgICAgICB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuZXh0Lm5hbWUsXG4gICAgICAgICAgICAgICAgc3R5bGVzOiBuZXh0LnN0eWxlcyxcbiAgICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc3R5bGVzID0gaW50ZXJwb2xhdGlvbi5zdHlsZXMgKyBcIjtcIjtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24ubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN0eWxlcyArPSBpbnRlcnBvbGF0aW9uLm1hcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pO1xuICAgICAgfVxuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICBpZiAobWVyZ2VkUHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBwcmV2aW91c0N1cnNvciA9IGN1cnNvcjtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcyk7XG4gICAgICAgICAgY3Vyc29yID0gcHJldmlvdXNDdXJzb3I7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHJlc3VsdCwgY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Z1bmN0aW9ucyB0aGF0IGFyZSBpbnRlcnBvbGF0ZWQgaW4gY3NzIGNhbGxzIHdpbGwgYmUgc3RyaW5naWZpZWQuXFxuJyArICdJZiB5b3Ugd2FudCB0byBoYXZlIGEgY3NzIGNhbGwgYmFzZWQgb24gcHJvcHMsIGNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNzcyBjYWxsIGxpa2UgdGhpc1xcbicgKyAnbGV0IGR5bmFtaWNTdHlsZSA9IChwcm9wcykgPT4gY3NzYGNvbG9yOiAke3Byb3BzLmNvbG9yfWBcXG4nICsgJ0l0IGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgd2l0aCBwcm9wcyBvciBpbnRlcnBvbGF0ZWQgaW4gYSBzdHlsZWQgY2FsbCBsaWtlIHRoaXNcXG4nICsgXCJsZXQgU29tZUNvbXBvbmVudCA9IHN0eWxlZCgnZGl2JylgJHtkeW5hbWljU3R5bGV9YFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gW107XG4gICAgICAgIHZhciByZXBsYWNlZCA9IGludGVycG9sYXRpb24ucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICB2YXIgZmFrZVZhck5hbWUgPSBcImFuaW1hdGlvblwiICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgICAgbWF0Y2hlZC5wdXNoKFwiY29uc3QgXCIgKyBmYWtlVmFyTmFtZSArIFwiID0ga2V5ZnJhbWVzYFwiICsgcDIucmVwbGFjZSgvXkBrZXlmcmFtZXMgYW5pbWF0aW9uLVxcdysvLCAnJykgKyBcImBcIik7XG4gICAgICAgICAgcmV0dXJuIFwiJHtcIiArIGZha2VWYXJOYW1lICsgXCJ9XCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2BrZXlmcmFtZXNgIG91dHB1dCBnb3QgaW50ZXJwb2xhdGVkIGludG8gcGxhaW4gc3RyaW5nLCBwbGVhc2Ugd3JhcCBpdCB3aXRoIGBjc3NgLlxcblxcbicgKyAnSW5zdGVhZCBvZiBkb2luZyB0aGlzOlxcblxcbicgKyBbXS5jb25jYXQobWF0Y2hlZCwgW1wiYFwiICsgcmVwbGFjZWQgKyBcImBcIl0pLmpvaW4oJ1xcbicpICsgJ1xcblxcbllvdSBzaG91bGQgd3JhcCBpdCB3aXRoIGBjc3NgIGxpa2UgdGhpczpcXG5cXG4nICsgKFwiY3NzYFwiICsgcmVwbGFjZWQgKyBcImBcIikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICB9IC8vIGZpbmFsaXplIHN0cmluZyB2YWx1ZXMgKHJlZ3VsYXIgc3RyaW5ncyBhbmQgZnVuY3Rpb25zIGludGVycG9sYXRlZCBpbnRvIGNzcyBjYWxscylcblxuXG4gIGlmIChyZWdpc3RlcmVkID09IG51bGwpIHtcbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHZhciBjYWNoZWQgPSByZWdpc3RlcmVkW2ludGVycG9sYXRpb25dO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24gJiYgc2hvdWxkV2FybkFib3V0SW50ZXJwb2xhdGluZ0NsYXNzTmFtZUZyb21Dc3MgJiYgY2FjaGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLmVycm9yKCdJbnRlcnBvbGF0aW5nIGEgY2xhc3NOYW1lIGZyb20gY3NzYGAgaXMgbm90IHJlY29tbWVuZGVkIGFuZCB3aWxsIGNhdXNlIHByb2JsZW1zIHdpdGggY29tcG9zaXRpb24uXFxuJyArICdJbnRlcnBvbGF0aW5nIGEgY2xhc3NOYW1lIGZyb20gY3NzYGAgd2lsbCBiZSBjb21wbGV0ZWx5IHVuc3VwcG9ydGVkIGluIGEgZnV0dXJlIG1ham9yIHZlcnNpb24gb2YgRW1vdGlvbicpO1xuICAgIHNob3VsZFdhcm5BYm91dEludGVycG9sYXRpbmdDbGFzc05hbWVGcm9tQ3NzID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY2FjaGVkICE9PSB1bmRlZmluZWQgJiYgIWNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24gPyBjYWNoZWQgOiBpbnRlcnBvbGF0aW9uO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmopIHtcbiAgdmFyIHN0cmluZyA9ICcnO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgc3RyaW5nICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9ialtpXSwgZmFsc2UpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgICAgdmFyIHZhbHVlID0gb2JqW19rZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAocmVnaXN0ZXJlZCAhPSBudWxsICYmIHJlZ2lzdGVyZWRbdmFsdWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgcmVnaXN0ZXJlZFt2YWx1ZV0gKyBcIn1cIjtcbiAgICAgICAgfSBlbHNlIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlKSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX2tleSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYmFiZWwtcGx1Z2luLWVtb3Rpb24uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlWzBdID09PSAnc3RyaW5nJyAmJiAocmVnaXN0ZXJlZCA9PSBudWxsIHx8IHJlZ2lzdGVyZWRbdmFsdWVbMF1dID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHZhbHVlLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZVtfaV0pKSB7XG4gICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZVtfaV0pICsgXCI7XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbnRlcnBvbGF0ZWQgPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCB2YWx1ZSwgZmFsc2UpO1xuXG4gICAgICAgICAgc3dpdGNoIChfa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgaW50ZXJwb2xhdGVkICsgXCI7XCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIF9rZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgaW50ZXJwb2xhdGVkICsgXCJ9XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nO1xufVxuXG52YXIgbGFiZWxQYXR0ZXJuID0gL2xhYmVsOlxccyooW15cXHM7XFxue10rKVxccyo7L2c7XG52YXIgc291cmNlTWFwUGF0dGVybjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc291cmNlTWFwUGF0dGVybiA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy87XG59IC8vIHRoaXMgaXMgdGhlIGN1cnNvciBmb3Iga2V5ZnJhbWVzXG4vLyBrZXlmcmFtZXMgYXJlIHN0b3JlZCBvbiB0aGUgU2VyaWFsaXplZFN0eWxlcyBvYmplY3QgYXMgYSBsaW5rZWQgbGlzdFxuXG5cbnZhciBjdXJzb3I7XG52YXIgc2VyaWFsaXplU3R5bGVzID0gZnVuY3Rpb24gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIHJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcgJiYgYXJnc1swXSAhPT0gbnVsbCAmJiBhcmdzWzBdLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFyZ3NbMF07XG4gIH1cblxuICB2YXIgc3RyaW5nTW9kZSA9IHRydWU7XG4gIHZhciBzdHlsZXMgPSAnJztcbiAgY3Vyc29yID0gdW5kZWZpbmVkO1xuICB2YXIgc3RyaW5ncyA9IGFyZ3NbMF07XG5cbiAgaWYgKHN0cmluZ3MgPT0gbnVsbCB8fCBzdHJpbmdzLnJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RyaW5nTW9kZSA9IGZhbHNlO1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBzdHJpbmdzLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICB9XG5cbiAgICBzdHlsZXMgKz0gc3RyaW5nc1swXTtcbiAgfSAvLyB3ZSBzdGFydCBhdCAxIHNpbmNlIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgZmlyc3QgYXJnXG5cblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgYXJnc1tpXSwgc3R5bGVzLmNoYXJDb2RlQXQoc3R5bGVzLmxlbmd0aCAtIDEpID09PSA0Nik7XG5cbiAgICBpZiAoc3RyaW5nTW9kZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpXTtcbiAgICB9XG4gIH1cblxuICB2YXIgc291cmNlTWFwO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2Uoc291cmNlTWFwUGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICBzb3VyY2VNYXAgPSBtYXRjaDtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfSAvLyB1c2luZyBhIGdsb2JhbCByZWdleCB3aXRoIC5leGVjIGlzIHN0YXRlZnVsIHNvIGxhc3RJbmRleCBoYXMgdG8gYmUgcmVzZXQgZWFjaCB0aW1lXG5cblxuICBsYWJlbFBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgdmFyIGlkZW50aWZpZXJOYW1lID0gJyc7XG4gIHZhciBtYXRjaDsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YjgwOWMyY2YyOTQ5ODAwYTBmNjFmYjVcblxuICB3aGlsZSAoKG1hdGNoID0gbGFiZWxQYXR0ZXJuLmV4ZWMoc3R5bGVzKSkgIT09IG51bGwpIHtcbiAgICBpZGVudGlmaWVyTmFtZSArPSAnLScgKyAvLyAkRmxvd0ZpeE1lIHdlIGtub3cgaXQncyBub3QgbnVsbFxuICAgIG1hdGNoWzFdO1xuICB9XG5cbiAgdmFyIG5hbWUgPSBoYXNoU3RyaW5nKHN0eWxlcykgKyBpZGVudGlmaWVyTmFtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWUgU2VyaWFsaXplZFN0eWxlcyB0eXBlIGRvZXNuJ3QgaGF2ZSB0b1N0cmluZyBwcm9wZXJ0eSAoYW5kIHdlIGRvbid0IHdhbnQgdG8gYWRkIGl0KVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICBtYXA6IHNvdXJjZU1hcCxcbiAgICAgIG5leHQ6IGN1cnNvcixcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiWW91IGhhdmUgdHJpZWQgdG8gc3RyaW5naWZ5IG9iamVjdCByZXR1cm5lZCBmcm9tIGBjc3NgIGZ1bmN0aW9uLiBJdCBpc24ndCBzdXBwb3NlZCB0byBiZSB1c2VkIGRpcmVjdGx5IChlLmcuIGFzIHZhbHVlIG9mIHRoZSBgY2xhc3NOYW1lYCBwcm9wKSwgYnV0IHJhdGhlciBoYW5kZWQgdG8gZW1vdGlvbiBzbyBpdCBjYW4gaGFuZGxlIGl0IChlLmcuIGFzIHZhbHVlIG9mIGBjc3NgIHByb3ApLlwiO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgbmV4dDogY3Vyc29yXG4gIH07XG59O1xuXG5leHBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfTtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgZm9yd2FyZFJlZiwgY3JlYXRlRWxlbWVudCwgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnO1xuaW1wb3J0IGNzcyBmcm9tICdAZW1vdGlvbi9jc3MnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jc3MnO1xuXG52YXIgRW1vdGlvbkNhY2hlQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoIC8vIHdlJ3JlIGRvaW5nIHRoaXMgdG8gYXZvaWQgcHJlY29uc3RydWN0J3MgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIGluIHRoaXMgb25lIGNhc2Vcbi8vIGJlY2F1c2UgdGhpcyBtb2R1bGUgaXMgcHJpbWFyaWx5IGludGVuZGVkIGZvciB0aGUgYnJvd3NlciBhbmQgbm9kZVxuLy8gYnV0IGl0J3MgYWxzbyByZXF1aXJlZCBpbiByZWFjdCBuYXRpdmUgYW5kIHNpbWlsYXIgZW52aXJvbm1lbnRzIHNvbWV0aW1lc1xuLy8gYW5kIHdlIGNvdWxkIGhhdmUgYSBzcGVjaWFsIGJ1aWxkIGp1c3QgZm9yIHRoYXRcbi8vIGJ1dCB0aGlzIGlzIG11Y2ggZWFzaWVyIGFuZCB0aGUgbmF0aXZlIHBhY2thZ2VzXG4vLyBtaWdodCB1c2UgYSBkaWZmZXJlbnQgdGhlbWUgY29udGV4dCBpbiB0aGUgZnV0dXJlIGFueXdheVxudHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IGNyZWF0ZUNhY2hlKCkgOiBudWxsKTtcbnZhciBUaGVtZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcbnZhciBDYWNoZVByb3ZpZGVyID0gRW1vdGlvbkNhY2hlQ29udGV4dC5Qcm92aWRlcjtcblxudmFyIHdpdGhFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB3aXRoRW1vdGlvbkNhY2hlKGZ1bmMpIHtcbiAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoRW1vdGlvbkNhY2hlQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICByZXR1cm4gZnVuYyhwcm9wcywgY2FjaGUsIHJlZik7XG4gICAgfSk7XG4gIH07IC8vICRGbG93Rml4TWVcblxuXG4gIHJldHVybiBmb3J3YXJkUmVmKHJlbmRlcik7XG59O1xuXG4vLyB0aHVzIHdlIG9ubHkgbmVlZCB0byByZXBsYWNlIHdoYXQgaXMgYSB2YWxpZCBjaGFyYWN0ZXIgZm9yIEpTLCBidXQgbm90IGZvciBDU1NcblxudmFyIHNhbml0aXplSWRlbnRpZmllciA9IGZ1bmN0aW9uIHNhbml0aXplSWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHJldHVybiBpZGVudGlmaWVyLnJlcGxhY2UoL1xcJC9nLCAnLScpO1xufTtcblxudmFyIHR5cGVQcm9wTmFtZSA9ICdfX0VNT1RJT05fVFlQRV9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBsYWJlbFByb3BOYW1lID0gJ19fRU1PVElPTl9MQUJFTF9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoY2FjaGUsIHByb3BzLCB0aGVtZSwgcmVmKSB7XG4gIHZhciBjc3NQcm9wID0gdGhlbWUgPT09IG51bGwgPyBwcm9wcy5jc3MgOiBwcm9wcy5jc3ModGhlbWUpOyAvLyBzbyB0aGF0IHVzaW5nIGBjc3NgIGZyb20gYGVtb3Rpb25gIGFuZCBwYXNzaW5nIHRoZSByZXN1bHQgdG8gdGhlIGNzcyBwcm9wIHdvcmtzXG4gIC8vIG5vdCBwYXNzaW5nIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIHNlcmlhbGl6ZVN0eWxlcyBiZWNhdXNlIGl0IHdvdWxkXG4gIC8vIG1ha2UgY2VydGFpbiBiYWJlbCBvcHRpbWlzYXRpb25zIG5vdCBwb3NzaWJsZVxuXG4gIGlmICh0eXBlb2YgY3NzUHJvcCA9PT0gJ3N0cmluZycgJiYgY2FjaGUucmVnaXN0ZXJlZFtjc3NQcm9wXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY3NzUHJvcCA9IGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF07XG4gIH1cblxuICB2YXIgdHlwZSA9IHByb3BzW3R5cGVQcm9wTmFtZV07XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW2Nzc1Byb3BdO1xuICB2YXIgY2xhc3NOYW1lID0gJyc7XG5cbiAgaWYgKHR5cGVvZiBwcm9wcy5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgY2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhjYWNoZS5yZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBwcm9wcy5jbGFzc05hbWUpO1xuICB9IGVsc2UgaWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lICsgXCIgXCI7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhyZWdpc3RlcmVkU3R5bGVzKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXJpYWxpemVkLm5hbWUuaW5kZXhPZignLScpID09PSAtMSkge1xuICAgIHZhciBsYWJlbEZyb21TdGFjayA9IHByb3BzW2xhYmVsUHJvcE5hbWVdO1xuXG4gICAgaWYgKGxhYmVsRnJvbVN0YWNrKSB7XG4gICAgICBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzZXJpYWxpemVkLCAnbGFiZWw6JyArIGxhYmVsRnJvbVN0YWNrICsgJzsnXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJ1bGVzID0gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpO1xuICBjbGFzc05hbWUgKz0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpICYmIGtleSAhPT0gJ2NzcycgJiYga2V5ICE9PSB0eXBlUHJvcE5hbWUgJiYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgfHwga2V5ICE9PSBsYWJlbFByb3BOYW1lKSkge1xuICAgICAgbmV3UHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgbmV3UHJvcHMucmVmID0gcmVmO1xuICBuZXdQcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gIHZhciBlbGUgPSBjcmVhdGVFbGVtZW50KHR5cGUsIG5ld1Byb3BzKTtcblxuICByZXR1cm4gZWxlO1xufTtcblxudmFyIEVtb3Rpb24gPVxuLyogI19fUFVSRV9fICovXG53aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICAvLyB1c2UgQ29udGV4dC5yZWFkIGZvciB0aGUgdGhlbWUgd2hlbiBpdCdzIHN0YWJsZVxuICBpZiAodHlwZW9mIHByb3BzLmNzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFRoZW1lQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICByZXR1cm4gcmVuZGVyKGNhY2hlLCBwcm9wcywgdGhlbWUsIHJlZik7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcmVuZGVyKGNhY2hlLCBwcm9wcywgbnVsbCwgcmVmKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBFbW90aW9uLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25Dc3NQcm9wSW50ZXJuYWwnO1xufSAvLyAkRmxvd0ZpeE1lXG5cblxudmFyIGpzeCA9IGZ1bmN0aW9uIGpzeCh0eXBlLCBwcm9wcykge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICBpZiAocHJvcHMgPT0gbnVsbCB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgJ2NzcycpKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgcHJvcHMuY3NzID09PSAnc3RyaW5nJyAmJiAvLyBjaGVjayBpZiB0aGVyZSBpcyBhIGNzcyBkZWNsYXJhdGlvblxuICBwcm9wcy5jc3MuaW5kZXhPZignOicpICE9PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlN0cmluZ3MgYXJlIG5vdCBhbGxvd2VkIGFzIGNzcyBwcm9wIHZhbHVlcywgcGxlYXNlIHdyYXAgaXQgaW4gYSBjc3MgdGVtcGxhdGUgbGl0ZXJhbCBmcm9tICdAZW1vdGlvbi9jc3MnIGxpa2UgdGhpczogY3NzYFwiICsgcHJvcHMuY3NzICsgXCJgXCIpO1xuICB9XG5cbiAgdmFyIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSA9IG5ldyBBcnJheShhcmdzTGVuZ3RoKTtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzBdID0gRW1vdGlvbjtcbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzW3R5cGVQcm9wTmFtZV0gPSB0eXBlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cbiAgICBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgIC8vIGNocm9tZVxuICAgICAgdmFyIG1hdGNoID0gZXJyb3Iuc3RhY2subWF0Y2goL2F0ICg/Ok9iamVjdFxcLnxNb2R1bGVcXC58KWpzeC4qXFxuXFxzK2F0ICg/Ok9iamVjdFxcLnwpKFtBLVpdW0EtWmEteiRdKykgLyk7XG5cbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgLy8gc2FmYXJpIGFuZCBmaXJlZm94XG4gICAgICAgIG1hdGNoID0gZXJyb3Iuc3RhY2subWF0Y2goLy4qXFxuKFtBLVpdW0EtWmEteiRdKylALyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBuZXdQcm9wc1tsYWJlbFByb3BOYW1lXSA9IHNhbml0aXplSWRlbnRpZmllcihtYXRjaFsxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzFdID0gbmV3UHJvcHM7XG5cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIHtcbiAgICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbaV0gPSBhcmdzW2ldO1xuICB9IC8vICRGbG93Rml4TWVcblxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KG51bGwsIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSk7XG59O1xuXG52YXIgd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsID0gZmFsc2U7XG52YXIgR2xvYmFsID1cbi8qICNfX1BVUkVfXyAqL1xud2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgJiYgKCAvLyBjaGVjayBmb3IgY2xhc3NOYW1lIGFzIHdlbGwgc2luY2UgdGhlIHVzZXIgaXNcbiAgLy8gcHJvYmFibHkgdXNpbmcgdGhlIGN1c3RvbSBjcmVhdGVFbGVtZW50IHdoaWNoXG4gIC8vIG1lYW5zIGl0IHdpbGwgYmUgdHVybmVkIGludG8gYSBjbGFzc05hbWUgcHJvcFxuICAvLyAkRmxvd0ZpeE1lIEkgZG9uJ3QgcmVhbGx5IHdhbnQgdG8gYWRkIGl0IHRvIHRoZSB0eXBlIHNpbmNlIGl0IHNob3VsZG4ndCBiZSB1c2VkXG4gIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wcy5jc3MpKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkl0IGxvb2tzIGxpa2UgeW91J3JlIHVzaW5nIHRoZSBjc3MgcHJvcCBvbiBHbG9iYWwsIGRpZCB5b3UgbWVhbiB0byB1c2UgdGhlIHN0eWxlcyBwcm9wIGluc3RlYWQ/XCIpO1xuICAgIHdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCA9IHRydWU7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gcHJvcHMuc3R5bGVzO1xuXG4gIGlmICh0eXBlb2Ygc3R5bGVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzdHlsZXModGhlbWUpXSk7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChJbm5lckdsb2JhbCwge1xuICAgICAgICBzZXJpYWxpemVkOiBzZXJpYWxpemVkLFxuICAgICAgICBjYWNoZTogY2FjaGVcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3N0eWxlc10pO1xuICByZXR1cm4gY3JlYXRlRWxlbWVudChJbm5lckdsb2JhbCwge1xuICAgIHNlcmlhbGl6ZWQ6IHNlcmlhbGl6ZWQsXG4gICAgY2FjaGU6IGNhY2hlXG4gIH0pO1xufSk7XG5cbi8vIG1haW50YWluIHBsYWNlIG92ZXIgcmVyZW5kZXJzLlxuLy8gaW5pdGlhbCByZW5kZXIgZnJvbSBicm93c2VyLCBpbnNlcnRCZWZvcmUgY29udGV4dC5zaGVldC50YWdzWzBdIG9yIGlmIGEgc3R5bGUgaGFzbid0IGJlZW4gaW5zZXJ0ZWQgdGhlcmUgeWV0LCBhcHBlbmRDaGlsZFxuLy8gaW5pdGlhbCBjbGllbnQtc2lkZSByZW5kZXIgZnJvbSBTU1IsIHVzZSBwbGFjZSBvZiBoeWRyYXRpbmcgdGFnXG52YXIgSW5uZXJHbG9iYWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW5uZXJHbG9iYWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIElubmVyR2xvYmFsKHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCwgdXBkYXRlcikgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJbm5lckdsb2JhbC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5zaGVldCA9IG5ldyBTdHlsZVNoZWV0KHtcbiAgICAgIGtleTogdGhpcy5wcm9wcy5jYWNoZS5rZXkgKyBcIi1nbG9iYWxcIixcbiAgICAgIG5vbmNlOiB0aGlzLnByb3BzLmNhY2hlLnNoZWV0Lm5vbmNlLFxuICAgICAgY29udGFpbmVyOiB0aGlzLnByb3BzLmNhY2hlLnNoZWV0LmNvbnRhaW5lclxuICAgIH0pOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWVtb3Rpb24tXCIgKyB0aGlzLnByb3BzLmNhY2hlLmtleSArIFwiPVxcXCJcIiArIHRoaXMucHJvcHMuc2VyaWFsaXplZC5uYW1lICsgXCJcXFwiXVwiKTtcblxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICB0aGlzLnNoZWV0LnRhZ3MucHVzaChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5jYWNoZS5zaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zaGVldC5iZWZvcmUgPSB0aGlzLnByb3BzLmNhY2hlLnNoZWV0LnRhZ3NbMF07XG4gICAgfVxuXG4gICAgdGhpcy5pbnNlcnRTdHlsZXMoKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmIChwcmV2UHJvcHMuc2VyaWFsaXplZC5uYW1lICE9PSB0aGlzLnByb3BzLnNlcmlhbGl6ZWQubmFtZSkge1xuICAgICAgdGhpcy5pbnNlcnRTdHlsZXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmluc2VydFN0eWxlcyA9IGZ1bmN0aW9uIGluc2VydFN0eWxlcyQxKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNlcmlhbGl6ZWQubmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBpbnNlcnQga2V5ZnJhbWVzXG4gICAgICBpbnNlcnRTdHlsZXModGhpcy5wcm9wcy5jYWNoZSwgdGhpcy5wcm9wcy5zZXJpYWxpemVkLm5leHQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICAvLyBpZiB0aGlzIGRvZXNuJ3QgZXhpc3QgdGhlbiBpdCB3aWxsIGJlIG51bGwgc28gdGhlIHN0eWxlIGVsZW1lbnQgd2lsbCBiZSBhcHBlbmRlZFxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnNoZWV0LnRhZ3NbdGhpcy5zaGVldC50YWdzLmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHRoaXMuc2hlZXQuYmVmb3JlID0gZWxlbWVudDtcbiAgICAgIHRoaXMuc2hlZXQuZmx1c2goKTtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLmNhY2hlLmluc2VydChcIlwiLCB0aGlzLnByb3BzLnNlcmlhbGl6ZWQsIHRoaXMuc2hlZXQsIGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnNoZWV0LmZsdXNoKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBJbm5lckdsb2JhbDtcbn0oQ29tcG9uZW50KTtcblxudmFyIGtleWZyYW1lcyA9IGZ1bmN0aW9uIGtleWZyYW1lcygpIHtcbiAgdmFyIGluc2VydGFibGUgPSBjc3MuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICB2YXIgbmFtZSA9IFwiYW5pbWF0aW9uLVwiICsgaW5zZXJ0YWJsZS5uYW1lOyAvLyAkRmxvd0ZpeE1lXG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHN0eWxlczogXCJAa2V5ZnJhbWVzIFwiICsgbmFtZSArIFwie1wiICsgaW5zZXJ0YWJsZS5zdHlsZXMgKyBcIn1cIixcbiAgICBhbmltOiAxLFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBcIl9FTU9fXCIgKyB0aGlzLm5hbWUgKyBcIl9cIiArIHRoaXMuc3R5bGVzICsgXCJfRU1PX1wiO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBjbGFzc25hbWVzID0gZnVuY3Rpb24gY2xhc3NuYW1lcyhhcmdzKSB7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgY2xzID0gJyc7XG5cbiAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBhcmcgPSBhcmdzW2ldO1xuICAgIGlmIChhcmcgPT0gbnVsbCkgY29udGludWU7XG4gICAgdmFyIHRvQWRkID0gdm9pZCAwO1xuXG4gICAgc3dpdGNoICh0eXBlb2YgYXJnKSB7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgICAgICB0b0FkZCA9IGNsYXNzbmFtZXMoYXJnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9BZGQgPSAnJztcblxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBhcmcpIHtcbiAgICAgICAgICAgICAgaWYgKGFyZ1trXSAmJiBrKSB7XG4gICAgICAgICAgICAgICAgdG9BZGQgJiYgKHRvQWRkICs9ICcgJyk7XG4gICAgICAgICAgICAgICAgdG9BZGQgKz0gaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHtcbiAgICAgICAgICB0b0FkZCA9IGFyZztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0b0FkZCkge1xuICAgICAgY2xzICYmIChjbHMgKz0gJyAnKTtcbiAgICAgIGNscyArPSB0b0FkZDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2xzO1xufTtcblxuZnVuY3Rpb24gbWVyZ2UocmVnaXN0ZXJlZCwgY3NzLCBjbGFzc05hbWUpIHtcbiAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbXTtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lKTtcblxuICBpZiAocmVnaXN0ZXJlZFN0eWxlcy5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIHJldHVybiByYXdDbGFzc05hbWUgKyBjc3MocmVnaXN0ZXJlZFN0eWxlcyk7XG59XG5cbnZhciBDbGFzc05hbWVzID0gd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNvbnRleHQpIHtcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICB2YXIgaGFzUmVuZGVyZWQgPSBmYWxzZTtcblxuICAgIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NzcyBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNvbnRleHQucmVnaXN0ZXJlZCk7XG5cbiAgICAgIHtcbiAgICAgICAgaW5zZXJ0U3R5bGVzKGNvbnRleHQsIHNlcmlhbGl6ZWQsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRleHQua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG4gICAgfTtcblxuICAgIHZhciBjeCA9IGZ1bmN0aW9uIGN4KCkge1xuICAgICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjeCBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlKGNvbnRleHQucmVnaXN0ZXJlZCwgY3NzLCBjbGFzc25hbWVzKGFyZ3MpKTtcbiAgICB9O1xuXG4gICAgdmFyIGNvbnRlbnQgPSB7XG4gICAgICBjc3M6IGNzcyxcbiAgICAgIGN4OiBjeCxcbiAgICAgIHRoZW1lOiB0aGVtZVxuICAgIH07XG4gICAgdmFyIGVsZSA9IHByb3BzLmNoaWxkcmVuKGNvbnRlbnQpO1xuICAgIGhhc1JlbmRlcmVkID0gdHJ1ZTtcblxuICAgIHJldHVybiBlbGU7XG4gIH0pO1xufSk7XG5cbmV4cG9ydCB7IENhY2hlUHJvdmlkZXIsIENsYXNzTmFtZXMsIEdsb2JhbCwgVGhlbWVDb250ZXh0LCBqc3gsIGtleWZyYW1lcywgd2l0aEVtb3Rpb25DYWNoZSB9O1xuIiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaXNQcm9wVmFsaWQgZnJvbSAnQGVtb3Rpb24vaXMtcHJvcC12YWxpZCc7XG5pbXBvcnQgeyB3aXRoRW1vdGlvbkNhY2hlLCBUaGVtZUNvbnRleHQgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5cbnZhciB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgPSBpc1Byb3BWYWxpZDtcblxudmFyIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCA9IGZ1bmN0aW9uIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudChrZXkpIHtcbiAgcmV0dXJuIGtleSAhPT0gJ3RoZW1lJyAmJiBrZXkgIT09ICdpbm5lclJlZic7XG59O1xuXG52YXIgZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKHRhZykge1xuICByZXR1cm4gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiYgLy8gOTYgaXMgb25lIGxlc3MgdGhhbiB0aGUgY2hhciBjb2RlXG4gIC8vIGZvciBcImFcIiBzbyB0aGlzIGlzIGNoZWNraW5nIHRoYXRcbiAgLy8gaXQncyBhIGxvd2VyY2FzZSBjaGFyYWN0ZXJcbiAgdGFnLmNoYXJDb2RlQXQoMCkgPiA5NiA/IHRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyA6IHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudDtcbn07XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xuXG52YXIgY3JlYXRlU3R5bGVkID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIHRyeWluZyB0byBjcmVhdGUgYSBzdHlsZWQgZWxlbWVudCB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuXFxuWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgaXQuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlkZW50aWZpZXJOYW1lO1xuICB2YXIgc2hvdWxkRm9yd2FyZFByb3A7XG4gIHZhciB0YXJnZXRDbGFzc05hbWU7XG5cbiAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlkZW50aWZpZXJOYW1lID0gb3B0aW9ucy5sYWJlbDtcbiAgICB0YXJnZXRDbGFzc05hbWUgPSBvcHRpb25zLnRhcmdldDtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgJiYgb3B0aW9ucy5zaG91bGRGb3J3YXJkUHJvcCA/IGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgcmV0dXJuIHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AocHJvcE5hbWUpICYmIC8vICRGbG93Rml4TWVcbiAgICAgIG9wdGlvbnMuc2hvdWxkRm9yd2FyZFByb3AocHJvcE5hbWUpO1xuICAgIH0gOiBvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wO1xuICB9XG5cbiAgdmFyIGlzUmVhbCA9IHRhZy5fX2Vtb3Rpb25fcmVhbCA9PT0gdGFnO1xuICB2YXIgYmFzZVRhZyA9IGlzUmVhbCAmJiB0YWcuX19lbW90aW9uX2Jhc2UgfHwgdGFnO1xuXG4gIGlmICh0eXBlb2Ygc2hvdWxkRm9yd2FyZFByb3AgIT09ICdmdW5jdGlvbicgJiYgaXNSZWFsKSB7XG4gICAgc2hvdWxkRm9yd2FyZFByb3AgPSB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wO1xuICB9XG5cbiAgdmFyIGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wIHx8IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChiYXNlVGFnKTtcbiAgdmFyIHNob3VsZFVzZUFzID0gIWRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCgnYXMnKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgc3R5bGVzID0gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQgPyB0YWcuX19lbW90aW9uX3N0eWxlcy5zbGljZSgwKSA6IFtdO1xuXG4gICAgaWYgKGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoKFwibGFiZWw6XCIgKyBpZGVudGlmaWVyTmFtZSArIFwiO1wiKTtcbiAgICB9XG5cbiAgICBpZiAoYXJnc1swXSA9PSBudWxsIHx8IGFyZ3NbMF0ucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoLmFwcGx5KHN0eWxlcywgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZ3NbMF1bMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzLnB1c2goYXJnc1swXVswXSk7XG4gICAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gICAgICB2YXIgaSA9IDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVtpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXMucHVzaChhcmdzW2ldLCBhcmdzWzBdW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWU6IHdlIG5lZWQgdG8gY2FzdCBTdGF0ZWxlc3NGdW5jdGlvbmFsQ29tcG9uZW50IHRvIG91ciBQcml2YXRlU3R5bGVkQ29tcG9uZW50IGNsYXNzXG5cblxuICAgIHZhciBTdHlsZWQgPSB3aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY29udGV4dCwgcmVmKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICB2YXIgZmluYWxUYWcgPSBzaG91bGRVc2VBcyAmJiBwcm9wcy5hcyB8fCBiYXNlVGFnO1xuICAgICAgICB2YXIgY2xhc3NOYW1lID0gJyc7XG4gICAgICAgIHZhciBjbGFzc0ludGVycG9sYXRpb25zID0gW107XG4gICAgICAgIHZhciBtZXJnZWRQcm9wcyA9IHByb3BzO1xuXG4gICAgICAgIGlmIChwcm9wcy50aGVtZSA9PSBudWxsKSB7XG4gICAgICAgICAgbWVyZ2VkUHJvcHMgPSB7fTtcblxuICAgICAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgICAgICAgbWVyZ2VkUHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVyZ2VkUHJvcHMudGhlbWUgPSB0aGVtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY29udGV4dC5yZWdpc3RlcmVkLCBjbGFzc0ludGVycG9sYXRpb25zLCBwcm9wcy5jbGFzc05hbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhzdHlsZXMuY29uY2F0KGNsYXNzSW50ZXJwb2xhdGlvbnMpLCBjb250ZXh0LnJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKTtcbiAgICAgICAgdmFyIHJ1bGVzID0gaW5zZXJ0U3R5bGVzKGNvbnRleHQsIHNlcmlhbGl6ZWQsIHR5cGVvZiBmaW5hbFRhZyA9PT0gJ3N0cmluZycpO1xuICAgICAgICBjbGFzc05hbWUgKz0gY29udGV4dC5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICAgICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGFzc05hbWUgKz0gXCIgXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmluYWxTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZFVzZUFzICYmIHNob3VsZEZvcndhcmRQcm9wID09PSB1bmRlZmluZWQgPyBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoZmluYWxUYWcpIDogZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wO1xuICAgICAgICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBfa2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgaWYgKHNob3VsZFVzZUFzICYmIF9rZXkgPT09ICdhcycpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgaWYgKCAvLyAkRmxvd0ZpeE1lXG4gICAgICAgICAgZmluYWxTaG91bGRGb3J3YXJkUHJvcChfa2V5KSkge1xuICAgICAgICAgICAgbmV3UHJvcHNbX2tleV0gPSBwcm9wc1tfa2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBuZXdQcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICAgIG5ld1Byb3BzLnJlZiA9IHJlZiB8fCBwcm9wcy5pbm5lclJlZjtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBwcm9wcy5pbm5lclJlZikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Bpbm5lclJlZmAgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIG1ham9yIHZlcnNpb24gb2YgRW1vdGlvbiwgcGxlYXNlIHVzZSB0aGUgYHJlZmAgcHJvcCBpbnN0ZWFkJyArIChpZGVudGlmaWVyTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBcIiBpbiB0aGUgdXNhZ2Ugb2YgYFwiICsgaWRlbnRpZmllck5hbWUgKyBcImBcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVsZSA9IGNyZWF0ZUVsZW1lbnQoZmluYWxUYWcsIG5ld1Byb3BzKTtcblxuICAgICAgICByZXR1cm4gZWxlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgU3R5bGVkLmRpc3BsYXlOYW1lID0gaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCA/IGlkZW50aWZpZXJOYW1lIDogXCJTdHlsZWQoXCIgKyAodHlwZW9mIGJhc2VUYWcgPT09ICdzdHJpbmcnID8gYmFzZVRhZyA6IGJhc2VUYWcuZGlzcGxheU5hbWUgfHwgYmFzZVRhZy5uYW1lIHx8ICdDb21wb25lbnQnKSArIFwiKVwiO1xuICAgIFN0eWxlZC5kZWZhdWx0UHJvcHMgPSB0YWcuZGVmYXVsdFByb3BzO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fcmVhbCA9IFN0eWxlZDtcbiAgICBTdHlsZWQuX19lbW90aW9uX2Jhc2UgPSBiYXNlVGFnO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fc3R5bGVzID0gc3R5bGVzO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3R5bGVkLCAndG9TdHJpbmcnLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICAgIGlmICh0YXJnZXRDbGFzc05hbWUgPT09IHVuZGVmaW5lZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuICdOT19DT01QT05FTlRfU0VMRUNUT1InO1xuICAgICAgICB9IC8vICRGbG93Rml4TWU6IGNvZXJjZSB1bmRlZmluZWQgdG8gc3RyaW5nXG5cblxuICAgICAgICByZXR1cm4gXCIuXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBTdHlsZWQud2l0aENvbXBvbmVudCA9IGZ1bmN0aW9uIChuZXh0VGFnLCBuZXh0T3B0aW9ucykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVN0eWxlZChuZXh0VGFnLCBuZXh0T3B0aW9ucyAhPT0gdW5kZWZpbmVkID8gX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucyB8fCB7fSwge30sIG5leHRPcHRpb25zKSA6IG9wdGlvbnMpLmFwcGx5KHZvaWQgMCwgc3R5bGVzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFN0eWxlZDtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN0eWxlZDtcbiIsInZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5leHBvcnQgZnVuY3Rpb24gZGVxdWFsKGZvbywgYmFyKSB7XG5cdHZhciBjdG9yLCBsZW47XG5cdGlmIChmb28gPT09IGJhcikgcmV0dXJuIHRydWU7XG5cblx0aWYgKGZvbyAmJiBiYXIgJiYgKGN0b3I9Zm9vLmNvbnN0cnVjdG9yKSA9PT0gYmFyLmNvbnN0cnVjdG9yKSB7XG5cdFx0aWYgKGN0b3IgPT09IERhdGUpIHJldHVybiBmb28uZ2V0VGltZSgpID09PSBiYXIuZ2V0VGltZSgpO1xuXHRcdGlmIChjdG9yID09PSBSZWdFeHApIHJldHVybiBmb28udG9TdHJpbmcoKSA9PT0gYmFyLnRvU3RyaW5nKCk7XG5cblx0XHRpZiAoY3RvciA9PT0gQXJyYXkpIHtcblx0XHRcdGlmICgobGVuPWZvby5sZW5ndGgpID09PSBiYXIubGVuZ3RoKSB7XG5cdFx0XHRcdHdoaWxlIChsZW4tLSAmJiBkZXF1YWwoZm9vW2xlbl0sIGJhcltsZW5dKSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbGVuID09PSAtMTtcblx0XHR9XG5cblx0XHRpZiAoIWN0b3IgfHwgdHlwZW9mIGZvbyA9PT0gJ29iamVjdCcpIHtcblx0XHRcdGxlbiA9IDA7XG5cdFx0XHRmb3IgKGN0b3IgaW4gZm9vKSB7XG5cdFx0XHRcdGlmIChoYXMuY2FsbChmb28sIGN0b3IpICYmICsrbGVuICYmICFoYXMuY2FsbChiYXIsIGN0b3IpKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlmICghKGN0b3IgaW4gYmFyKSB8fCAhZGVxdWFsKGZvb1tjdG9yXSwgYmFyW2N0b3JdKSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIE9iamVjdC5rZXlzKGJhcikubGVuZ3RoID09PSBsZW47XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZvbyAhPT0gZm9vICYmIGJhciAhPT0gYmFyO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEb2N1bWVudFZpc2libGUoKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgdHlwZW9mIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSAhPT0gJ2hpZGRlbic7XG4gICAgfVxuICAgIC8vIGFsd2F5cyBhc3N1bWUgaXQncyB2aXNpYmxlXG4gICAgcmV0dXJuIHRydWU7XG59XG4iLCIvLyB1c2UgV2Vha01hcCB0byBzdG9yZSB0aGUgb2JqZWN0LT5rZXkgbWFwcGluZ1xuLy8gc28gdGhlIG9iamVjdHMgY2FuIGJlIGdhcmJhZ2UgY29sbGVjdGVkLlxuLy8gV2Vha01hcCB1c2VzIGEgaGFzaHRhYmxlIHVuZGVyIHRoZSBob29kLCBzbyB0aGUgbG9va3VwXG4vLyBjb21wbGV4aXR5IGlzIGFsbW9zdCBPKDEpLlxudmFyIHRhYmxlID0gbmV3IFdlYWtNYXAoKTtcbi8vIGNvdW50ZXIgb2YgdGhlIGtleVxudmFyIGNvdW50ZXIgPSAwO1xuLy8gaGFzaGVzIGFuIGFycmF5IG9mIG9iamVjdHMgYW5kIHJldHVybnMgYSBzdHJpbmdcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhc2goYXJncykge1xuICAgIGlmICghYXJncy5sZW5ndGgpXG4gICAgICAgIHJldHVybiAnJztcbiAgICB2YXIga2V5ID0gJ2FyZyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBfaGFzaCA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGFyZ3NbaV0gPT09IG51bGwgfHxcbiAgICAgICAgICAgICh0eXBlb2YgYXJnc1tpXSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIGFyZ3NbaV0gIT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICAvLyBuZWVkIHRvIGNvbnNpZGVyIHRoZSBjYXNlIHRoYXQgYXJnc1tpXSBpcyBhIHN0cmluZzpcbiAgICAgICAgICAgIC8vIGFyZ3NbaV0gICAgICAgIF9oYXNoXG4gICAgICAgICAgICAvLyBcInVuZGVmaW5lZFwiIC0+ICdcInVuZGVmaW5lZFwiJ1xuICAgICAgICAgICAgLy8gdW5kZWZpbmVkICAgLT4gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgIC8vIDEyMyAgICAgICAgIC0+ICcxMjMnXG4gICAgICAgICAgICAvLyBudWxsICAgICAgICAtPiAnbnVsbCdcbiAgICAgICAgICAgIC8vIFwibnVsbFwiICAgICAgLT4gJ1wibnVsbFwiJ1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2ldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIF9oYXNoID0gJ1wiJyArIGFyZ3NbaV0gKyAnXCInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgX2hhc2ggPSBTdHJpbmcoYXJnc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRhYmxlLmhhcyhhcmdzW2ldKSkge1xuICAgICAgICAgICAgICAgIF9oYXNoID0gY291bnRlcjtcbiAgICAgICAgICAgICAgICB0YWJsZS5zZXQoYXJnc1tpXSwgY291bnRlcisrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF9oYXNoID0gdGFibGUuZ2V0KGFyZ3NbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGtleSArPSAnQCcgKyBfaGFzaDtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbn1cbiIsImltcG9ydCB7IGRlcXVhbCB9IGZyb20gJ2RlcXVhbC9saXRlJztcbmltcG9ydCBpc0RvY3VtZW50VmlzaWJsZSBmcm9tICcuL2xpYnMvaXMtZG9jdW1lbnQtdmlzaWJsZSc7XG5pbXBvcnQgQ2FjaGUgZnJvbSAnLi9jYWNoZSc7XG4vLyBjYWNoZVxudmFyIGNhY2hlID0gbmV3IENhY2hlKCk7XG4vLyBlcnJvciByZXRyeVxuZnVuY3Rpb24gb25FcnJvclJldHJ5KF8sIF9fLCBjb25maWcsIHJldmFsaWRhdGUsIG9wdHMpIHtcbiAgICBpZiAoIWlzRG9jdW1lbnRWaXNpYmxlKCkpIHtcbiAgICAgICAgLy8gaWYgaXQncyBoaWRkZW4sIHN0b3BcbiAgICAgICAgLy8gaXQgd2lsbCBhdXRvIHJldmFsaWRhdGUgd2hlbiBmb2N1c1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29uZmlnLmVycm9yUmV0cnlDb3VudCA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgb3B0cy5yZXRyeUNvdW50ID4gY29uZmlnLmVycm9yUmV0cnlDb3VudCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGV4cG9uZW50aWFsIGJhY2tvZmZcbiAgICB2YXIgY291bnQgPSBNYXRoLm1pbihvcHRzLnJldHJ5Q291bnQgfHwgMCwgOCk7XG4gICAgdmFyIHRpbWVvdXQgPSB+figoTWF0aC5yYW5kb20oKSArIDAuNSkgKiAoMSA8PCBjb3VudCkpICogY29uZmlnLmVycm9yUmV0cnlJbnRlcnZhbDtcbiAgICBzZXRUaW1lb3V0KHJldmFsaWRhdGUsIHRpbWVvdXQsIG9wdHMpO1xufVxuLy8gY2xpZW50IHNpZGU6IG5lZWQgdG8gYWRqdXN0IHRoZSBjb25maWdcbi8vIGJhc2VkIG9uIHRoZSBicm93c2VyIHN0YXR1c1xuLy8gc2xvdyBjb25uZWN0aW9uICg8PSA3MEticHMpXG52YXIgc2xvd0Nvbm5lY3Rpb24gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIG5hdmlnYXRvclsnY29ubmVjdGlvbiddICYmXG4gICAgWydzbG93LTJnJywgJzJnJ10uaW5kZXhPZihuYXZpZ2F0b3JbJ2Nvbm5lY3Rpb24nXS5lZmZlY3RpdmVUeXBlKSAhPT0gLTE7XG4vLyBjb25maWdcbnZhciBkZWZhdWx0Q29uZmlnID0ge1xuICAgIC8vIGV2ZW50c1xuICAgIG9uTG9hZGluZ1Nsb3c6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBvbkVycm9yOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgb25FcnJvclJldHJ5OiBvbkVycm9yUmV0cnksXG4gICAgZXJyb3JSZXRyeUludGVydmFsOiAoc2xvd0Nvbm5lY3Rpb24gPyAxMCA6IDUpICogMTAwMCxcbiAgICBmb2N1c1Rocm90dGxlSW50ZXJ2YWw6IDUgKiAxMDAwLFxuICAgIGRlZHVwaW5nSW50ZXJ2YWw6IDIgKiAxMDAwLFxuICAgIGxvYWRpbmdUaW1lb3V0OiAoc2xvd0Nvbm5lY3Rpb24gPyA1IDogMykgKiAxMDAwLFxuICAgIHJlZnJlc2hJbnRlcnZhbDogMCxcbiAgICByZXZhbGlkYXRlT25Gb2N1czogdHJ1ZSxcbiAgICByZXZhbGlkYXRlT25SZWNvbm5lY3Q6IHRydWUsXG4gICAgcmVmcmVzaFdoZW5IaWRkZW46IGZhbHNlLFxuICAgIHJlZnJlc2hXaGVuT2ZmbGluZTogZmFsc2UsXG4gICAgc2hvdWxkUmV0cnlPbkVycm9yOiB0cnVlLFxuICAgIHN1c3BlbnNlOiBmYWxzZSxcbiAgICBjb21wYXJlOiBkZXF1YWwsXG4gICAgZmV0Y2hlcjogZnVuY3Rpb24gKHVybCkgeyByZXR1cm4gZmV0Y2godXJsKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsgcmV0dXJuIHJlcy5qc29uKCk7IH0pOyB9XG59O1xuZXhwb3J0IHsgY2FjaGUgfTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRDb25maWc7XG4iLCJpbXBvcnQgaGFzaCBmcm9tICcuL2xpYnMvaGFzaCc7XG52YXIgQ2FjaGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2FjaGUoaW5pdGlhbERhdGEpIHtcbiAgICAgICAgaWYgKGluaXRpYWxEYXRhID09PSB2b2lkIDApIHsgaW5pdGlhbERhdGEgPSB7fTsgfVxuICAgICAgICB0aGlzLl9fY2FjaGUgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKGluaXRpYWxEYXRhKSk7XG4gICAgICAgIHRoaXMuX19saXN0ZW5lcnMgPSBbXTtcbiAgICB9XG4gICAgQ2FjaGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF9rZXkgPSB0aGlzLnNlcmlhbGl6ZUtleShrZXkpWzBdO1xuICAgICAgICByZXR1cm4gdGhpcy5fX2NhY2hlLmdldChfa2V5KTtcbiAgICB9O1xuICAgIENhY2hlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgX2tleSA9IHRoaXMuc2VyaWFsaXplS2V5KGtleSlbMF07XG4gICAgICAgIHRoaXMuX19jYWNoZS5zZXQoX2tleSwgdmFsdWUpO1xuICAgICAgICB0aGlzLm5vdGlmeSgpO1xuICAgIH07XG4gICAgQ2FjaGUucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuX19jYWNoZS5rZXlzKCkpO1xuICAgIH07XG4gICAgQ2FjaGUucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF9rZXkgPSB0aGlzLnNlcmlhbGl6ZUtleShrZXkpWzBdO1xuICAgICAgICByZXR1cm4gdGhpcy5fX2NhY2hlLmhhcyhfa2V5KTtcbiAgICB9O1xuICAgIENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fX2NhY2hlLmNsZWFyKCk7XG4gICAgICAgIHRoaXMubm90aWZ5KCk7XG4gICAgfTtcbiAgICBDYWNoZS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgX2tleSA9IHRoaXMuc2VyaWFsaXplS2V5KGtleSlbMF07XG4gICAgICAgIHRoaXMuX19jYWNoZS5kZWxldGUoX2tleSk7XG4gICAgICAgIHRoaXMubm90aWZ5KCk7XG4gICAgfTtcbiAgICAvLyBUT0RPOiBpbnRyb2R1Y2UgbmFtZXNwYWNlIGZvciB0aGUgY2FjaGVcbiAgICBDYWNoZS5wcm90b3R5cGUuc2VyaWFsaXplS2V5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgYXJncyA9IG51bGw7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGtleSA9IGtleSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIC8vIGRlcGVuZGVuY2llcyBub3QgcmVhZHlcbiAgICAgICAgICAgICAgICBrZXkgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShrZXkpKSB7XG4gICAgICAgICAgICAvLyBhcmdzIGFycmF5XG4gICAgICAgICAgICBhcmdzID0ga2V5O1xuICAgICAgICAgICAga2V5ID0gaGFzaChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gY29udmVydCBudWxsIHRvICcnXG4gICAgICAgICAgICBrZXkgPSBTdHJpbmcoa2V5IHx8ICcnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXJyb3JLZXkgPSBrZXkgPyAnZXJyQCcgKyBrZXkgOiAnJztcbiAgICAgICAgdmFyIGlzVmFsaWRhdGluZ0tleSA9IGtleSA/ICd2YWxpZGF0aW5nQCcgKyBrZXkgOiAnJztcbiAgICAgICAgcmV0dXJuIFtrZXksIGFyZ3MsIGVycm9yS2V5LCBpc1ZhbGlkYXRpbmdLZXldO1xuICAgIH07XG4gICAgQ2FjaGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBfdGhpcy5fX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX19saXN0ZW5lcnNbaW5kZXhdID0gX3RoaXMuX19saXN0ZW5lcnNbX3RoaXMuX19saXN0ZW5lcnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgX3RoaXMuX19saXN0ZW5lcnMubGVuZ3RoLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvLyBOb3RpZnkgQ2FjaGUgc3Vic2NyaWJlcnMgYWJvdXQgYSBjaGFuZ2UgaW4gdGhlIGNhY2hlXG4gICAgQ2FjaGUucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX19saXN0ZW5lcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfYVtfaV07XG4gICAgICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ2FjaGU7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgQ2FjaGU7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc09ubGluZSgpIHtcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvci5vbkxpbmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3Iub25MaW5lO1xuICAgIH1cbiAgICAvLyBhbHdheXMgYXNzdW1lIGl0J3Mgb25saW5lXG4gICAgcmV0dXJuIHRydWU7XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xudmFyIFNXUkNvbmZpZ0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KHt9KTtcblNXUkNvbmZpZ0NvbnRleHQuZGlzcGxheU5hbWUgPSAnU1dSQ29uZmlnQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBTV1JDb25maWdDb250ZXh0O1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCwgdXNlU3RhdGUsIHVzZVJlZiwgdXNlTWVtbywgdXNlRGVidWdWYWx1ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBkZWZhdWx0Q29uZmlnLCB7IGNhY2hlIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IGlzRG9jdW1lbnRWaXNpYmxlIGZyb20gJy4vbGlicy9pcy1kb2N1bWVudC12aXNpYmxlJztcbmltcG9ydCBpc09ubGluZSBmcm9tICcuL2xpYnMvaXMtb25saW5lJztcbmltcG9ydCBTV1JDb25maWdDb250ZXh0IGZyb20gJy4vc3dyLWNvbmZpZy1jb250ZXh0JztcbnZhciBJU19TRVJWRVIgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJztcbi8vIHBvbHlmaWxsIGZvciByZXF1ZXN0SWRsZUNhbGxiYWNrXG52YXIgcklDID0gSVNfU0VSVkVSXG4gICAgPyBudWxsXG4gICAgOiB3aW5kb3dbJ3JlcXVlc3RJZGxlQ2FsbGJhY2snXSB8fCAoZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHNldFRpbWVvdXQoZiwgMSk7IH0pO1xuLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuXG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IElTX1NFUlZFUiA/IHVzZUVmZmVjdCA6IHVzZUxheW91dEVmZmVjdDtcbi8vIGdsb2JhbCBzdGF0ZSBtYW5hZ2Vyc1xudmFyIENPTkNVUlJFTlRfUFJPTUlTRVMgPSB7fTtcbnZhciBDT05DVVJSRU5UX1BST01JU0VTX1RTID0ge307XG52YXIgRk9DVVNfUkVWQUxJREFUT1JTID0ge307XG52YXIgUkVDT05ORUNUX1JFVkFMSURBVE9SUyA9IHt9O1xudmFyIENBQ0hFX1JFVkFMSURBVE9SUyA9IHt9O1xudmFyIE1VVEFUSU9OX1RTID0ge307XG52YXIgTVVUQVRJT05fRU5EX1RTID0ge307XG4vLyBzZXR1cCBET00gZXZlbnRzIGxpc3RlbmVycyBmb3IgYGZvY3VzYCBhbmQgYHJlY29ubmVjdGAgYWN0aW9uc1xuaWYgKCFJU19TRVJWRVIgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICB2YXIgcmV2YWxpZGF0ZV8xID0gZnVuY3Rpb24gKHJldmFsaWRhdG9ycykge1xuICAgICAgICBpZiAoIWlzRG9jdW1lbnRWaXNpYmxlKCkgfHwgIWlzT25saW5lKCkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGZvciAodmFyIGtleSBpbiByZXZhbGlkYXRvcnMpIHtcbiAgICAgICAgICAgIGlmIChyZXZhbGlkYXRvcnNba2V5XVswXSlcbiAgICAgICAgICAgICAgICByZXZhbGlkYXRvcnNba2V5XVswXSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBmb2N1cyByZXZhbGlkYXRlXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXZhbGlkYXRlXzEoRk9DVVNfUkVWQUxJREFUT1JTKTsgfSwgZmFsc2UpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJldmFsaWRhdGVfMShGT0NVU19SRVZBTElEQVRPUlMpOyB9LCBmYWxzZSk7XG4gICAgLy8gcmVjb25uZWN0IHJldmFsaWRhdGVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmV2YWxpZGF0ZV8xKFJFQ09OTkVDVF9SRVZBTElEQVRPUlMpOyB9LCBmYWxzZSk7XG59XG52YXIgdHJpZ2dlciA9IGZ1bmN0aW9uIChfa2V5LCBzaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgaWYgKHNob3VsZFJldmFsaWRhdGUgPT09IHZvaWQgMCkgeyBzaG91bGRSZXZhbGlkYXRlID0gdHJ1ZTsgfVxuICAgIC8vIHdlIGFyZSBpZ25vcmluZyB0aGUgc2Vjb25kIGFyZ3VtZW50IHdoaWNoIGNvcnJlc3BvbmQgdG8gdGhlIGFyZ3VtZW50c1xuICAgIC8vIHRoZSBmZXRjaGVyIHdpbGwgcmVjZWl2ZSB3aGVuIGtleSBpcyBhbiBhcnJheVxuICAgIHZhciBfYSA9IGNhY2hlLnNlcmlhbGl6ZUtleShfa2V5KSwga2V5ID0gX2FbMF0sIGtleUVyciA9IF9hWzJdLCBrZXlWYWxpZGF0aW5nID0gX2FbM107XG4gICAgaWYgKCFrZXkpXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB2YXIgdXBkYXRlcnMgPSBDQUNIRV9SRVZBTElEQVRPUlNba2V5XTtcbiAgICBpZiAoa2V5ICYmIHVwZGF0ZXJzKSB7XG4gICAgICAgIHZhciBjdXJyZW50RGF0YSA9IGNhY2hlLmdldChrZXkpO1xuICAgICAgICB2YXIgY3VycmVudEVycm9yID0gY2FjaGUuZ2V0KGtleUVycik7XG4gICAgICAgIHZhciBjdXJyZW50SXNWYWxpZGF0aW5nID0gY2FjaGUuZ2V0KGtleVZhbGlkYXRpbmcpO1xuICAgICAgICB2YXIgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1cGRhdGVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh1cGRhdGVyc1tpXShzaG91bGRSZXZhbGlkYXRlLCBjdXJyZW50RGF0YSwgY3VycmVudEVycm9yLCBjdXJyZW50SXNWYWxpZGF0aW5nLCBpID4gMCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiBuZXcgdXBkYXRlZCB2YWx1ZVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FjaGUuZ2V0KGtleSk7IH0pO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNhY2hlLmdldChrZXkpKTtcbn07XG52YXIgYnJvYWRjYXN0U3RhdGUgPSBmdW5jdGlvbiAoa2V5LCBkYXRhLCBlcnJvciwgaXNWYWxpZGF0aW5nKSB7XG4gICAgdmFyIHVwZGF0ZXJzID0gQ0FDSEVfUkVWQUxJREFUT1JTW2tleV07XG4gICAgaWYgKGtleSAmJiB1cGRhdGVycykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVwZGF0ZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB1cGRhdGVyc1tpXShmYWxzZSwgZGF0YSwgZXJyb3IsIGlzVmFsaWRhdGluZyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xudmFyIG11dGF0ZSA9IGZ1bmN0aW9uIChfa2V5LCBfZGF0YSwgc2hvdWxkUmV2YWxpZGF0ZSkge1xuICAgIGlmIChzaG91bGRSZXZhbGlkYXRlID09PSB2b2lkIDApIHsgc2hvdWxkUmV2YWxpZGF0ZSA9IHRydWU7IH1cbiAgICByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBrZXksIGtleUVyciwgYmVmb3JlTXV0YXRpb25UcywgYmVmb3JlQ29uY3VycmVudFByb21pc2VzVHMsIGRhdGEsIGVycm9yLCBlcnJfMSwgZXJyXzIsIHVwZGF0ZXJzLCBwcm9taXNlcywgaTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBjYWNoZS5zZXJpYWxpemVLZXkoX2tleSksIGtleSA9IF9hWzBdLCBrZXlFcnIgPSBfYVsyXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFrZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIG5ldyBkYXRhLCBjYWxsIHJldmFsaWRhdGUgYWdhaW5zdCB0aGUga2V5XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgX2RhdGEgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRyaWdnZXIoX2tleSwgc2hvdWxkUmV2YWxpZGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGltZXN0YW1wc1xuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRpbWVzdGFtcHNcbiAgICAgICAgICAgICAgICAgICAgTVVUQVRJT05fVFNba2V5XSA9IERhdGUubm93KCkgLSAxO1xuICAgICAgICAgICAgICAgICAgICBNVVRBVElPTl9FTkRfVFNba2V5XSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZU11dGF0aW9uVHMgPSBNVVRBVElPTl9UU1trZXldO1xuICAgICAgICAgICAgICAgICAgICBiZWZvcmVDb25jdXJyZW50UHJvbWlzZXNUcyA9IENPTkNVUlJFTlRfUFJPTUlTRVNfVFNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2RhdGEgJiYgdHlwZW9mIF9kYXRhID09PSAnZnVuY3Rpb24nKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMSwgMywgLCA0XSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIF9kYXRhKGNhY2hlLmdldChrZXkpKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGVycl8xID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGVycl8xO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMyAvKmJyZWFrKi8sIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKF9kYXRhICYmIHR5cGVvZiBfZGF0YS50aGVuID09PSAnZnVuY3Rpb24nKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMTBdO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDY7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzYsIDgsICwgOV0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBfZGF0YV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIGVycl8yID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGVycl8yO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6IHJldHVybiBbMyAvKmJyZWFrKi8sIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gX2RhdGE7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTE7XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgb3RoZXIgbXV0YXRpb25zIGhhdmUgb2NjdXJyZWQgc2luY2Ugd2UndmUgc3RhcnRlZCBhd2FpdGluZywgaWYgc28gdGhlbiBkbyBub3QgcGVyc2lzdCB0aGlzIGNoYW5nZVxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVmb3JlTXV0YXRpb25UcyAhPT0gTVVUQVRJT05fVFNba2V5XSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlQ29uY3VycmVudFByb21pc2VzVHMgIT09IENPTkNVUlJFTlRfUFJPTUlTRVNfVFNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGRhdGFdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBjYWNoZWQgZGF0YSwgYXZvaWQgbm90aWZ5aW5nIGZyb20gdGhlIGNhY2hlXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5zZXQoa2V5LCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYWNoZS5zZXQoa2V5RXJyLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IHRoZSB0aW1lc3RhbXAgdG8gbWFyayB0aGUgbXV0YXRpb24gaGFzIGVuZGVkXG4gICAgICAgICAgICAgICAgICAgIE1VVEFUSU9OX0VORF9UU1trZXldID0gRGF0ZS5ub3coKSAtIDE7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZXJzID0gQ0FDSEVfUkVWQUxJREFUT1JTW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB1cGRhdGVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2godXBkYXRlcnNbaV0oISFzaG91bGRSZXZhbGlkYXRlLCBkYXRhLCBlcnJvciwgdW5kZWZpbmVkLCBpID4gMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIG5ldyB1cGRhdGVkIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyB0aHJvdyBlcnJvciBvciByZXR1cm4gZGF0YSB0byBiZSB1c2VkIGJ5IGNhbGxlciBvZiBtdXRhdGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBkYXRhXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZnVuY3Rpb24gdXNlU1dSKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBfa2V5LCBmbiwgY29uZmlnID0ge307XG4gICAgaWYgKGFyZ3MubGVuZ3RoID49IDEpIHtcbiAgICAgICAgX2tleSA9IGFyZ3NbMF07XG4gICAgfVxuICAgIGlmIChhcmdzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgZm4gPSBhcmdzWzFdO1xuICAgICAgICBjb25maWcgPSBhcmdzWzJdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBmbiA9IGFyZ3NbMV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25maWcgPSBhcmdzWzFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHdlIGFzc3VtZSBga2V5YCBhcyB0aGUgaWRlbnRpZmllciBvZiB0aGUgcmVxdWVzdFxuICAgIC8vIGBrZXlgIGNhbiBjaGFuZ2UgYnV0IGBmbmAgc2hvdWxkbid0XG4gICAgLy8gKGJlY2F1c2UgYHJldmFsaWRhdGVgIG9ubHkgZGVwZW5kcyBvbiBga2V5YClcbiAgICAvLyBga2V5RXJyYCBpcyB0aGUgY2FjaGUga2V5IGZvciBlcnJvciBvYmplY3RzXG4gICAgdmFyIF9hID0gY2FjaGUuc2VyaWFsaXplS2V5KF9rZXkpLCBrZXkgPSBfYVswXSwgZm5BcmdzID0gX2FbMV0sIGtleUVyciA9IF9hWzJdLCBrZXlWYWxpZGF0aW5nID0gX2FbM107XG4gICAgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENvbmZpZywgdXNlQ29udGV4dChTV1JDb25maWdDb250ZXh0KSwgY29uZmlnKTtcbiAgICB2YXIgY29uZmlnUmVmID0gdXNlUmVmKGNvbmZpZyk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbmZpZ1JlZi5jdXJyZW50ID0gY29uZmlnO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgZm4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIHVzZSB0aGUgZ2xvYmFsIGZldGNoZXJcbiAgICAgICAgZm4gPSBjb25maWcuZmV0Y2hlcjtcbiAgICB9XG4gICAgdmFyIHJlc29sdmVEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2FjaGVkRGF0YSA9IGNhY2hlLmdldChrZXkpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIGNhY2hlZERhdGEgPT09ICd1bmRlZmluZWQnID8gY29uZmlnLmluaXRpYWxEYXRhIDogY2FjaGVkRGF0YTtcbiAgICB9O1xuICAgIHZhciBpbml0aWFsRGF0YSA9IHJlc29sdmVEYXRhKCk7XG4gICAgdmFyIGluaXRpYWxFcnJvciA9IGNhY2hlLmdldChrZXlFcnIpO1xuICAgIHZhciBpbml0aWFsSXNWYWxpZGF0aW5nID0gISFjYWNoZS5nZXQoa2V5VmFsaWRhdGluZyk7XG4gICAgLy8gaWYgYSBzdGF0ZSBpcyBhY2Nlc3NlZCAoZGF0YSwgZXJyb3Igb3IgaXNWYWxpZGF0aW5nKSxcbiAgICAvLyB3ZSBhZGQgdGhlIHN0YXRlIHRvIGRlcGVuZGVuY2llcyBzbyBpZiB0aGUgc3RhdGUgaXNcbiAgICAvLyB1cGRhdGVkIGluIHRoZSBmdXR1cmUsIHdlIGNhbiB0cmlnZ2VyIGEgcmVyZW5kZXJcbiAgICB2YXIgc3RhdGVEZXBlbmRlbmNpZXMgPSB1c2VSZWYoe1xuICAgICAgICBkYXRhOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgICBpc1ZhbGlkYXRpbmc6IGZhbHNlXG4gICAgfSk7XG4gICAgdmFyIHN0YXRlUmVmID0gdXNlUmVmKHtcbiAgICAgICAgZGF0YTogaW5pdGlhbERhdGEsXG4gICAgICAgIGVycm9yOiBpbml0aWFsRXJyb3IsXG4gICAgICAgIGlzVmFsaWRhdGluZzogaW5pdGlhbElzVmFsaWRhdGluZ1xuICAgIH0pO1xuICAgIC8vIGRpc3BsYXkgdGhlIGRhdGEgbGFiZWwgaW4gdGhlIFJlYWN0IERldlRvb2xzIG5leHQgdG8gU1dSIGhvb2tzXG4gICAgdXNlRGVidWdWYWx1ZShzdGF0ZVJlZi5jdXJyZW50LmRhdGEpO1xuICAgIHZhciByZXJlbmRlciA9IHVzZVN0YXRlKG51bGwpWzFdO1xuICAgIHZhciBkaXNwYXRjaCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgIHZhciBzaG91bGRVcGRhdGVTdGF0ZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBrIGluIHBheWxvYWQpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZVJlZi5jdXJyZW50W2tdID09PSBwYXlsb2FkW2tdKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZVJlZi5jdXJyZW50W2tdID0gcGF5bG9hZFtrXTtcbiAgICAgICAgICAgIGlmIChzdGF0ZURlcGVuZGVuY2llcy5jdXJyZW50W2tdKSB7XG4gICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlU3RhdGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzaG91bGRVcGRhdGVTdGF0ZSB8fCBjb25maWcuc3VzcGVuc2UpIHtcbiAgICAgICAgICAgIGlmICh1bm1vdW50ZWRSZWYuY3VycmVudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICByZXJlbmRlcih7fSk7XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG4gICAgLy8gZXJyb3IgcmVmIGluc2lkZSByZXZhbGlkYXRlIChpcyBsYXN0IHJlcXVlc3QgZXJyb3JlZD8pXG4gICAgdmFyIHVubW91bnRlZFJlZiA9IHVzZVJlZihmYWxzZSk7XG4gICAgdmFyIGtleVJlZiA9IHVzZVJlZihrZXkpO1xuICAgIC8vIGRvIHVubW91bnQgY2hlY2sgZm9yIGNhbGxiYWNrc1xuICAgIHZhciBldmVudHNSZWYgPSB1c2VSZWYoe1xuICAgICAgICBlbWl0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVubW91bnRlZFJlZi5jdXJyZW50KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIChfYSA9IGNvbmZpZ1JlZi5jdXJyZW50KVtldmVudF0uYXBwbHkoX2EsIHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgYm91bmRNdXRhdGUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZGF0YSwgc2hvdWxkUmV2YWxpZGF0ZSkge1xuICAgICAgICByZXR1cm4gbXV0YXRlKGtleVJlZi5jdXJyZW50LCBkYXRhLCBzaG91bGRSZXZhbGlkYXRlKTtcbiAgICB9LCBbXSk7XG4gICAgdmFyIGFkZFJldmFsaWRhdG9yID0gZnVuY3Rpb24gKHJldmFsaWRhdG9ycywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFjYWxsYmFjaylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKCFyZXZhbGlkYXRvcnNba2V5XSkge1xuICAgICAgICAgICAgcmV2YWxpZGF0b3JzW2tleV0gPSBbY2FsbGJhY2tdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV2YWxpZGF0b3JzW2tleV0ucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZW1vdmVSZXZhbGlkYXRvciA9IGZ1bmN0aW9uIChyZXZsaWRhdG9ycywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHJldmxpZGF0b3JzW2tleV0pIHtcbiAgICAgICAgICAgIHZhciByZXZhbGlkYXRvcnMgPSByZXZsaWRhdG9yc1trZXldO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gcmV2YWxpZGF0b3JzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAvLyAxMHggZmFzdGVyIHRoYW4gc3BsaWNlXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9qc3BlcmYuY29tL2FycmF5LXJlbW92ZS1ieS1pbmRleFxuICAgICAgICAgICAgICAgIHJldmFsaWRhdG9yc1tpbmRleF0gPSByZXZhbGlkYXRvcnNbcmV2YWxpZGF0b3JzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIHJldmFsaWRhdG9ycy5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gc3RhcnQgYSByZXZhbGlkYXRpb25cbiAgICB2YXIgcmV2YWxpZGF0ZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChyZXZhbGlkYXRlT3B0cykge1xuICAgICAgICBpZiAocmV2YWxpZGF0ZU9wdHMgPT09IHZvaWQgMCkgeyByZXZhbGlkYXRlT3B0cyA9IHt9OyB9XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbG9hZGluZywgc2hvdWxkRGVkdXBpbmcsIG5ld0RhdGEsIHN0YXJ0QXQsIHNob3VsZElnbm9yZVJlcXVlc3QsIG5ld1N0YXRlLCBlcnJfMywgcmV0cnlDb3VudDtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgha2V5IHx8ICFmbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVubW91bnRlZFJlZi5jdXJyZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXZhbGlkYXRlT3B0cyA9IE9iamVjdC5hc3NpZ24oeyBkZWR1cGU6IGZhbHNlIH0sIHJldmFsaWRhdGVPcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkRGVkdXBpbmcgPSB0eXBlb2YgQ09OQ1VSUkVOVF9QUk9NSVNFU1trZXldICE9PSAndW5kZWZpbmVkJyAmJiByZXZhbGlkYXRlT3B0cy5kZWR1cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgNiwgLCA3XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZGF0aW5nOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLnNldChrZXlWYWxpZGF0aW5nLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2hvdWxkRGVkdXBpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbHNvIHVwZGF0ZSBvdGhlciBob29rc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyb2FkY2FzdFN0YXRlKGtleSwgc3RhdGVSZWYuY3VycmVudC5kYXRhLCBzdGF0ZVJlZi5jdXJyZW50LmVycm9yLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGEgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydEF0ID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzaG91bGREZWR1cGluZykgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGVyZSdzIGFscmVhZHkgYW4gb25nb2luZyByZXF1ZXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBvbmUgbmVlZHMgdG8gYmUgZGVkdXBsaWNhdGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRBdCA9IENPTkNVUlJFTlRfUFJPTUlTRVNfVFNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIENPTkNVUlJFTlRfUFJPTUlTRVNba2V5XV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGEgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbm8gY2FjaGUgYmVpbmcgcmVuZGVyZWQgY3VycmVudGx5IChpdCBzaG93cyBhIGJsYW5rIHBhZ2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgdHJpZ2dlciB0aGUgbG9hZGluZyBzbG93IGV2ZW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5sb2FkaW5nVGltZW91dCAmJiAhY2FjaGUuZ2V0KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvYWRpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHNSZWYuY3VycmVudC5lbWl0KCdvbkxvYWRpbmdTbG93Jywga2V5LCBjb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNvbmZpZy5sb2FkaW5nVGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm5BcmdzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09OQ1VSUkVOVF9QUk9NSVNFU1trZXldID0gZm4uYXBwbHkodm9pZCAwLCBmbkFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09OQ1VSUkVOVF9QUk9NSVNFU1trZXldID0gZm4oa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIENPTkNVUlJFTlRfUFJPTUlTRVNfVFNba2V5XSA9IHN0YXJ0QXQgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgQ09OQ1VSUkVOVF9QUk9NSVNFU1trZXldXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RGF0YSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBDT05DVVJSRU5UX1BST01JU0VTW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIENPTkNVUlJFTlRfUFJPTUlTRVNfVFNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGNvbmZpZy5kZWR1cGluZ0ludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgdGhlIHN1Y2Nlc3MgZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGRvIHRoaXMgZm9yIHRoZSBvcmlnaW5hbCByZXF1ZXN0LlxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzUmVmLmN1cnJlbnQuZW1pdCgnb25TdWNjZXNzJywgbmV3RGF0YSwga2V5LCBjb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA1O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRJZ25vcmVSZXF1ZXN0ID0gXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSdyZSBvdGhlciBvbmdvaW5nIHJlcXVlc3QocyksIHN0YXJ0ZWQgYWZ0ZXIgdGhlIGN1cnJlbnQgb25lLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBpZ25vcmUgdGhlIGN1cnJlbnQgb25lIHRvIGF2b2lkIHBvc3NpYmxlIHJhY2UgY29uZGl0aW9uczpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgcmVxMS0tLS0tLS0tLS0tLS0tLS0tLT5yZXMxICAgICAgICAoY3VycmVudCBvbmUpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgcmVxMi0tLS0tLS0tLS0tLS0tLS0+cmVzMlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHJlcXVlc3QgdGhhdCBmaXJlZCBsYXRlciB3aWxsIGFsd2F5cyBiZSBrZXB0LlxuICAgICAgICAgICAgICAgICAgICAgICAgQ09OQ1VSUkVOVF9QUk9NSVNFU19UU1trZXldID4gc3RhcnRBdCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3JlIG90aGVyIG11dGF0aW9ucyhzKSwgb3ZlcmxhcHBlZCB3aXRoIHRoZSBjdXJyZW50IHJldmFsaWRhdGlvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICByZXEtLS0tLS0tLS0tLS0tLS0tLS0+cmVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgbXV0YXRlLS0tLS0tPmVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHJlcS0tLS0tLS0tLS0tLT5yZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIG11dGF0ZS0tLS0tLT5lbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICByZXEtLS0tLS0tLS0tLS0tLS0tLS0+cmVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgbXV0YXRlLS0tLS0tLS4uLi0tLS0tLS0tLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgaGF2ZSB0byBpZ25vcmUgdGhlIHJldmFsaWRhdGlvbiByZXN1bHQgKHJlcykgYmVjYXVzZSBpdCdzIG5vIGxvbmdlciBmcmVzaC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtZWFud2hpbGUsIGEgbmV3IHJldmFsaWRhdGlvbiBzaG91bGQgYmUgdHJpZ2dlcmVkIHdoZW4gdGhlIG11dGF0aW9uIGVuZHMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKE1VVEFUSU9OX1RTW2tleV0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzdGFydEF0IDw9IE1VVEFUSU9OX1RTW2tleV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRBdCA8PSBNVVRBVElPTl9FTkRfVFNba2V5XSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNVVRBVElPTl9FTkRfVFNba2V5XSA9PT0gMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZElnbm9yZVJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaCh7IGlzVmFsaWRhdGluZzogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGZhbHNlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLnNldChrZXksIG5ld0RhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuc2V0KGtleUVyciwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLnNldChrZXlWYWxpZGF0aW5nLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkYXRpbmc6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZVJlZi5jdXJyZW50LmVycm9yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IGhhdmUgYW4gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZS5lcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29uZmlnLmNvbXBhcmUoc3RhdGVSZWYuY3VycmVudC5kYXRhLCBuZXdEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZXAgY29tcGFyZSB0byBhdm9pZCBleHRyYSByZS1yZW5kZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkYXRhIGNoYW5nZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZS5kYXRhID0gbmV3RGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1lcmdlIHRoZSBuZXcgc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5ld1N0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2hvdWxkRGVkdXBpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbHNvIHVwZGF0ZSBvdGhlciBob29rc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyb2FkY2FzdFN0YXRlKGtleSwgbmV3RGF0YSwgbmV3U3RhdGUuZXJyb3IsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJfMyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBDT05DVVJSRU5UX1BST01JU0VTW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgQ09OQ1VSUkVOVF9QUk9NSVNFU19UU1trZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuc2V0KGtleUVyciwgZXJyXzMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IGEgbmV3IGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCB1c2UgZGVlcCBlcXVhbCBmb3IgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGVSZWYuY3VycmVudC5lcnJvciAhPT0gZXJyXzMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBrZWVwIHRoZSBzdGFsZSBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyXzNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNob3VsZERlZHVwaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsc28gYnJvYWRjYXN0IHRvIHVwZGF0ZSBvdGhlciBob29rc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicm9hZGNhc3RTdGF0ZShrZXksIHVuZGVmaW5lZCwgZXJyXzMsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBldmVudHMgYW5kIHJldHJ5XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHNSZWYuY3VycmVudC5lbWl0KCdvbkVycm9yJywgZXJyXzMsIGtleSwgY29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcuc2hvdWxkUmV0cnlPbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlDb3VudCA9IChyZXZhbGlkYXRlT3B0cy5yZXRyeUNvdW50IHx8IDApICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHNSZWYuY3VycmVudC5lbWl0KCdvbkVycm9yUmV0cnknLCBlcnJfMywga2V5LCBjb25maWcsIHJldmFsaWRhdGUsIE9iamVjdC5hc3NpZ24oeyBkZWR1cGU6IHRydWUgfSwgcmV2YWxpZGF0ZU9wdHMsIHsgcmV0cnlDb3VudDogcmV0cnlDb3VudCB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRydWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LCBba2V5XSk7XG4gICAgLy8gbW91bnRlZCAoY2xpZW50IHNpZGUgcmVuZGVyaW5nKVxuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWtleSlcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIC8vIGFmdGVyIGBrZXlgIHVwZGF0ZXMsIHdlIG5lZWQgdG8gbWFyayBpdCBhcyBtb3VudGVkXG4gICAgICAgIHVubW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIC8vIGFmdGVyIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZCAoaHlkcmF0ZWQpLFxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgZGF0YSBmcm9tIHRoZSBjYWNoZVxuICAgICAgICAvLyBhbmQgdHJpZ2dlciBhIHJldmFsaWRhdGlvblxuICAgICAgICB2YXIgY3VycmVudEhvb2tEYXRhID0gc3RhdGVSZWYuY3VycmVudC5kYXRhO1xuICAgICAgICB2YXIgbGF0ZXN0S2V5ZWREYXRhID0gcmVzb2x2ZURhdGEoKTtcbiAgICAgICAgLy8gdXBkYXRlIHRoZSBzdGF0ZSBpZiB0aGUga2V5IGNoYW5nZWQgKG5vdCB0aGUgaW5pdGFsIHJlbmRlcikgb3IgY2FjaGUgdXBkYXRlZFxuICAgICAgICBpZiAoa2V5UmVmLmN1cnJlbnQgIT09IGtleSkge1xuICAgICAgICAgICAga2V5UmVmLmN1cnJlbnQgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb25maWcuY29tcGFyZShjdXJyZW50SG9va0RhdGEsIGxhdGVzdEtleWVkRGF0YSkpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKHsgZGF0YTogbGF0ZXN0S2V5ZWREYXRhIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldmFsaWRhdGUgd2l0aCBkZWR1cGluZ1xuICAgICAgICB2YXIgc29mdFJldmFsaWRhdGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZXZhbGlkYXRlKHsgZGVkdXBlOiB0cnVlIH0pOyB9O1xuICAgICAgICAvLyB0cmlnZ2VyIGEgcmV2YWxpZGF0aW9uXG4gICAgICAgIGlmIChjb25maWcucmV2YWxpZGF0ZU9uTW91bnQgfHxcbiAgICAgICAgICAgICghY29uZmlnLmluaXRpYWxEYXRhICYmIGNvbmZpZy5yZXZhbGlkYXRlT25Nb3VudCA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBsYXRlc3RLZXllZERhdGEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgLy8gZGVsYXkgcmV2YWxpZGF0ZSBpZiB0aGVyZSdzIGNhY2hlXG4gICAgICAgICAgICAgICAgLy8gdG8gbm90IGJsb2NrIHRoZSByZW5kZXJpbmdcbiAgICAgICAgICAgICAgICBySUMoc29mdFJldmFsaWRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc29mdFJldmFsaWRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgb25Gb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nIHx8ICFjb25maWdSZWYuY3VycmVudC5yZXZhbGlkYXRlT25Gb2N1cylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHNvZnRSZXZhbGlkYXRlKCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIChwZW5kaW5nID0gZmFsc2UpOyB9LCBjb25maWdSZWYuY3VycmVudC5mb2N1c1Rocm90dGxlSW50ZXJ2YWwpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb25SZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnUmVmLmN1cnJlbnQucmV2YWxpZGF0ZU9uUmVjb25uZWN0KSB7XG4gICAgICAgICAgICAgICAgc29mdFJldmFsaWRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gcmVnaXN0ZXIgZ2xvYmFsIGNhY2hlIHVwZGF0ZSBsaXN0ZW5lclxuICAgICAgICB2YXIgb25VcGRhdGUgPSBmdW5jdGlvbiAoc2hvdWxkUmV2YWxpZGF0ZSwgdXBkYXRlZERhdGEsIHVwZGF0ZWRFcnJvciwgdXBkYXRlZElzVmFsaWRhdGluZywgZGVkdXBlKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkUmV2YWxpZGF0ZSA9PT0gdm9pZCAwKSB7IHNob3VsZFJldmFsaWRhdGUgPSB0cnVlOyB9XG4gICAgICAgICAgICBpZiAoZGVkdXBlID09PSB2b2lkIDApIHsgZGVkdXBlID0gdHJ1ZTsgfVxuICAgICAgICAgICAgLy8gdXBkYXRlIGhvb2sgc3RhdGVcbiAgICAgICAgICAgIHZhciBuZXdTdGF0ZSA9IHt9O1xuICAgICAgICAgICAgdmFyIG5lZWRVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXBkYXRlZERhdGEgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWNvbmZpZy5jb21wYXJlKHN0YXRlUmVmLmN1cnJlbnQuZGF0YSwgdXBkYXRlZERhdGEpKSB7XG4gICAgICAgICAgICAgICAgbmV3U3RhdGUuZGF0YSA9IHVwZGF0ZWREYXRhO1xuICAgICAgICAgICAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYWx3YXlzIHVwZGF0ZSBlcnJvclxuICAgICAgICAgICAgLy8gYmVjYXVzZSBpdCBjYW4gYmUgYHVuZGVmaW5lZGBcbiAgICAgICAgICAgIGlmIChzdGF0ZVJlZi5jdXJyZW50LmVycm9yICE9PSB1cGRhdGVkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZS5lcnJvciA9IHVwZGF0ZWRFcnJvcjtcbiAgICAgICAgICAgICAgICBuZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXBkYXRlZElzVmFsaWRhdGluZyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICBzdGF0ZVJlZi5jdXJyZW50LmlzVmFsaWRhdGluZyAhPT0gdXBkYXRlZElzVmFsaWRhdGluZykge1xuICAgICAgICAgICAgICAgIG5ld1N0YXRlLmlzVmFsaWRhdGluZyA9IHVwZGF0ZWRJc1ZhbGlkYXRpbmc7XG4gICAgICAgICAgICAgICAgbmVlZFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmVlZFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5ld1N0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZHVwZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc29mdFJldmFsaWRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBhZGRSZXZhbGlkYXRvcihGT0NVU19SRVZBTElEQVRPUlMsIG9uRm9jdXMpO1xuICAgICAgICBhZGRSZXZhbGlkYXRvcihSRUNPTk5FQ1RfUkVWQUxJREFUT1JTLCBvblJlY29ubmVjdCk7XG4gICAgICAgIGFkZFJldmFsaWRhdG9yKENBQ0hFX1JFVkFMSURBVE9SUywgb25VcGRhdGUpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gY2xlYW51cFxuICAgICAgICAgICAgZGlzcGF0Y2ggPSBmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9O1xuICAgICAgICAgICAgLy8gbWFyayBpdCBhcyB1bm1vdW50ZWRcbiAgICAgICAgICAgIHVubW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlbW92ZVJldmFsaWRhdG9yKEZPQ1VTX1JFVkFMSURBVE9SUywgb25Gb2N1cyk7XG4gICAgICAgICAgICByZW1vdmVSZXZhbGlkYXRvcihSRUNPTk5FQ1RfUkVWQUxJREFUT1JTLCBvblJlY29ubmVjdCk7XG4gICAgICAgICAgICByZW1vdmVSZXZhbGlkYXRvcihDQUNIRV9SRVZBTElEQVRPUlMsIG9uVXBkYXRlKTtcbiAgICAgICAgfTtcbiAgICB9LCBba2V5LCByZXZhbGlkYXRlXSk7XG4gICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aW1lciA9IG51bGw7XG4gICAgICAgIHZhciB0aWNrID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIXN0YXRlUmVmLmN1cnJlbnQuZXJyb3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY29uZmlnUmVmLmN1cnJlbnQucmVmcmVzaFdoZW5IaWRkZW4gfHwgaXNEb2N1bWVudFZpc2libGUoKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY29uZmlnUmVmLmN1cnJlbnQucmVmcmVzaFdoZW5PZmZsaW5lIHx8IGlzT25saW5lKCkpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IHJldmFsaWRhdGUgd2hlbiB0aGUgcGFnZSBpcyB2aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBBUEkgcmVxdWVzdCBlcnJvcmVkLCB3ZSBzdG9wIHBvbGxpbmcgaW4gdGhpcyByb3VuZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGxldCB0aGUgZXJyb3IgcmV0cnkgZnVuY3Rpb24gaGFuZGxlIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXZhbGlkYXRlKHsgZGVkdXBlOiB0cnVlIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSByZXZhbGlkYXRlIHdoZW4gdGhlIHBhZ2UgaXMgdmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgQVBJIHJlcXVlc3QgZXJyb3JlZCwgd2Ugc3RvcCBwb2xsaW5nIGluIHRoaXMgcm91bmRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBsZXQgdGhlIGVycm9yIHJldHJ5IGZ1bmN0aW9uIGhhbmRsZSBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZWFkIHRoZSBsYXRlc3QgcmVmcmVzaEludGVydmFsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnUmVmLmN1cnJlbnQucmVmcmVzaEludGVydmFsICYmICFzdGF0ZVJlZi5jdXJyZW50LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KHRpY2ssIGNvbmZpZ1JlZi5jdXJyZW50LnJlZnJlc2hJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pOyB9O1xuICAgICAgICBpZiAoY29uZmlnUmVmLmN1cnJlbnQucmVmcmVzaEludGVydmFsKSB7XG4gICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQodGljaywgY29uZmlnUmVmLmN1cnJlbnQucmVmcmVzaEludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRpbWVyKVxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIH07XG4gICAgfSwgW1xuICAgICAgICBjb25maWcucmVmcmVzaEludGVydmFsLFxuICAgICAgICBjb25maWcucmVmcmVzaFdoZW5IaWRkZW4sXG4gICAgICAgIGNvbmZpZy5yZWZyZXNoV2hlbk9mZmxpbmUsXG4gICAgICAgIHJldmFsaWRhdGVcbiAgICBdKTtcbiAgICAvLyBkZWZpbmUgcmV0dXJuZWQgc3RhdGVcbiAgICAvLyBjYW4gYmUgbWVtb3JpemVkIHNpbmNlIHRoZSBzdGF0ZSBpcyBhIHJlZlxuICAgIHZhciBtZW1vaXplZFN0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHsgcmV2YWxpZGF0ZTogcmV2YWxpZGF0ZSwgbXV0YXRlOiBib3VuZE11dGF0ZSB9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdGF0ZSwge1xuICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICAvLyBga2V5YCBtaWdodCBiZSBjaGFuZ2VkIGluIHRoZSB1cGNvbWluZyBob29rIHJlLXJlbmRlcixcbiAgICAgICAgICAgICAgICAvLyBidXQgdGhlIHByZXZpb3VzIHN0YXRlIHdpbGwgc3RheVxuICAgICAgICAgICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gbWF0Y2ggdGhlIGxhdGVzdCBrZXkgYW5kIGRhdGEgKGZhbGxiYWNrIHRvIGBpbml0aWFsRGF0YWApXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlRGVwZW5kZW5jaWVzLmN1cnJlbnQuZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5UmVmLmN1cnJlbnQgPT09IGtleSA/IHN0YXRlUmVmLmN1cnJlbnQuZXJyb3IgOiBpbml0aWFsRXJyb3I7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZURlcGVuZGVuY2llcy5jdXJyZW50LmRhdGEgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5UmVmLmN1cnJlbnQgPT09IGtleSA/IHN0YXRlUmVmLmN1cnJlbnQuZGF0YSA6IGluaXRpYWxEYXRhO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzVmFsaWRhdGluZzoge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZURlcGVuZGVuY2llcy5jdXJyZW50LmlzVmFsaWRhdGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZVJlZi5jdXJyZW50LmlzVmFsaWRhdGluZztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9LCBbcmV2YWxpZGF0ZV0pO1xuICAgIC8vIHN1c3BlbnNlXG4gICAgaWYgKGNvbmZpZy5zdXNwZW5zZSkge1xuICAgICAgICAvLyBpbiBzdXNwZW5zZSBtb2RlLCB3ZSBjYW4ndCByZXR1cm4gZW1wdHkgc3RhdGVcbiAgICAgICAgLy8gKGl0IHNob3VsZCBiZSBzdXNwZW5kZWQpXG4gICAgICAgIC8vIHRyeSB0byBnZXQgZGF0YSBhbmQgZXJyb3IgZnJvbSBjYWNoZVxuICAgICAgICB2YXIgbGF0ZXN0RGF0YSA9IGNhY2hlLmdldChrZXkpO1xuICAgICAgICB2YXIgbGF0ZXN0RXJyb3IgPSBjYWNoZS5nZXQoa2V5RXJyKTtcbiAgICAgICAgaWYgKHR5cGVvZiBsYXRlc3REYXRhID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbGF0ZXN0RGF0YSA9IGluaXRpYWxEYXRhO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbGF0ZXN0RXJyb3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBsYXRlc3RFcnJvciA9IGluaXRpYWxFcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGxhdGVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICB0eXBlb2YgbGF0ZXN0RXJyb3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAvLyBuZWVkIHRvIHN0YXJ0IHRoZSByZXF1ZXN0IGlmIGl0IGhhc24ndFxuICAgICAgICAgICAgaWYgKCFDT05DVVJSRU5UX1BST01JU0VTW2tleV0pIHtcbiAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIHJldmFsaWRhdGUgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICAvLyB0byBnZXQgdGhlIHByb21pc2VcbiAgICAgICAgICAgICAgICByZXZhbGlkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQ09OQ1VSUkVOVF9QUk9NSVNFU1trZXldICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIENPTkNVUlJFTlRfUFJPTUlTRVNba2V5XS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgaXQgaXMgYSBwcm9taXNlXG4gICAgICAgICAgICAgICAgdGhyb3cgQ09OQ1VSUkVOVF9QUk9NSVNFU1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaXQncyBhIHZhbHVlLCByZXR1cm4gaXQgZGlyZWN0bHkgKG92ZXJyaWRlKVxuICAgICAgICAgICAgbGF0ZXN0RGF0YSA9IENPTkNVUlJFTlRfUFJPTUlTRVNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGxhdGVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGxhdGVzdEVycm9yKSB7XG4gICAgICAgICAgICAvLyBpbiBzdXNwZW5zZSBtb2RlLCB0aHJvdyBlcnJvciBpZiB0aGVyZSdzIG5vIGNvbnRlbnRcbiAgICAgICAgICAgIHRocm93IGxhdGVzdEVycm9yO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiB0aGUgbGF0ZXN0IGRhdGEgLyBlcnJvciBmcm9tIGNhY2hlXG4gICAgICAgIC8vIGluIGNhc2UgYGtleWAgaGFzIGNoYW5nZWRcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9yOiBsYXRlc3RFcnJvcixcbiAgICAgICAgICAgIGRhdGE6IGxhdGVzdERhdGEsXG4gICAgICAgICAgICByZXZhbGlkYXRlOiByZXZhbGlkYXRlLFxuICAgICAgICAgICAgbXV0YXRlOiBib3VuZE11dGF0ZSxcbiAgICAgICAgICAgIGlzVmFsaWRhdGluZzogc3RhdGVSZWYuY3VycmVudC5pc1ZhbGlkYXRpbmdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW9pemVkU3RhdGU7XG59XG52YXIgU1dSQ29uZmlnID0gU1dSQ29uZmlnQ29udGV4dC5Qcm92aWRlcjtcbmV4cG9ydCB7IHRyaWdnZXIsIG11dGF0ZSwgU1dSQ29uZmlnIH07XG5leHBvcnQgZGVmYXVsdCB1c2VTV1I7XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbmltcG9ydCB7IHVzZUNvbnRleHQsIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVmYXVsdENvbmZpZywgeyBjYWNoZSB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCBTV1JDb25maWdDb250ZXh0IGZyb20gJy4vc3dyLWNvbmZpZy1jb250ZXh0JztcbmltcG9ydCB1c2VTV1IgZnJvbSAnLi91c2Utc3dyJztcbmZ1bmN0aW9uIHVzZVNXUkluZmluaXRlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBnZXRLZXksIGZuLCBjb25maWcgPSB7fTtcbiAgICBpZiAoYXJncy5sZW5ndGggPj0gMSkge1xuICAgICAgICBnZXRLZXkgPSBhcmdzWzBdO1xuICAgIH1cbiAgICBpZiAoYXJncy5sZW5ndGggPiAyKSB7XG4gICAgICAgIGZuID0gYXJnc1sxXTtcbiAgICAgICAgY29uZmlnID0gYXJnc1syXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZm4gPSBhcmdzWzFdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uZmlnID0gYXJnc1sxXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0Q29uZmlnLCB1c2VDb250ZXh0KFNXUkNvbmZpZ0NvbnRleHQpLCBjb25maWcpO1xuICAgIHZhciBfYSA9IGNvbmZpZy5pbml0aWFsU2l6ZSwgaW5pdGlhbFNpemUgPSBfYSA9PT0gdm9pZCAwID8gMSA6IF9hLCBfYiA9IGNvbmZpZy5yZXZhbGlkYXRlQWxsLCByZXZhbGlkYXRlQWxsID0gX2IgPT09IHZvaWQgMCA/IGZhbHNlIDogX2IsIF9jID0gY29uZmlnLnBlcnNpc3RTaXplLCBwZXJzaXN0U2l6ZSA9IF9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9jLCBkZWZhdWx0RmV0Y2hlciA9IGNvbmZpZy5mZXRjaGVyLCBleHRyYUNvbmZpZyA9IF9fcmVzdChjb25maWcsIFtcImluaXRpYWxTaXplXCIsIFwicmV2YWxpZGF0ZUFsbFwiLCBcInBlcnNpc3RTaXplXCIsIFwiZmV0Y2hlclwiXSk7XG4gICAgaWYgKHR5cGVvZiBmbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gdXNlIHRoZSBnbG9iYWwgZmV0Y2hlclxuICAgICAgICAvLyB3ZSBoYXZlIHRvIGNvbnZlcnQgdGhlIHR5cGUgaGVyZVxuICAgICAgICBmbiA9IGRlZmF1bHRGZXRjaGVyO1xuICAgIH1cbiAgICAvLyBnZXQgdGhlIHNlcmlhbGl6ZWQga2V5IG9mIHRoZSBmaXJzdCBwYWdlXG4gICAgdmFyIGZpcnN0UGFnZUtleSA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgICAgO1xuICAgICAgICBmaXJzdFBhZ2VLZXkgPSBjYWNoZS5zZXJpYWxpemVLZXkoZ2V0S2V5KDAsIG51bGwpKVswXTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBub3QgcmVhZHlcbiAgICB9XG4gICAgdmFyIHJlcmVuZGVyID0gdXNlU3RhdGUoZmFsc2UpWzFdO1xuICAgIC8vIHdlIHVzZSBjYWNoZSB0byBwYXNzIGV4dHJhIGluZm8gKGNvbnRleHQpIHRvIGZldGNoZXIgc28gaXQgY2FuIGJlIGdsb2JhbGx5IHNoYXJlZFxuICAgIC8vIGhlcmUgd2UgZ2V0IHRoZSBrZXkgb2YgdGhlIGZldGNoZXIgY29udGV4dCBjYWNoZVxuICAgIHZhciBjb250ZXh0Q2FjaGVLZXkgPSBudWxsO1xuICAgIGlmIChmaXJzdFBhZ2VLZXkpIHtcbiAgICAgICAgY29udGV4dENhY2hlS2V5ID0gJ2NvbnRleHRAJyArIGZpcnN0UGFnZUtleTtcbiAgICB9XG4gICAgLy8gcGFnZSBjb3VudCBpcyBjYWNoZWQgYXMgd2VsbCwgc28gd2hlbiBuYXZpZ2F0aW5nIHRoZSBsaXN0IGNhbiBiZSByZXN0b3JlZFxuICAgIHZhciBwYWdlQ291bnRDYWNoZUtleSA9IG51bGw7XG4gICAgdmFyIGNhY2hlZFBhZ2VTaXplO1xuICAgIGlmIChmaXJzdFBhZ2VLZXkpIHtcbiAgICAgICAgcGFnZUNvdW50Q2FjaGVLZXkgPSAnc2l6ZUAnICsgZmlyc3RQYWdlS2V5O1xuICAgICAgICBjYWNoZWRQYWdlU2l6ZSA9IGNhY2hlLmdldChwYWdlQ291bnRDYWNoZUtleSk7XG4gICAgfVxuICAgIHZhciBwYWdlQ291bnRSZWYgPSB1c2VSZWYoY2FjaGVkUGFnZVNpemUgfHwgaW5pdGlhbFNpemUpO1xuICAgIHZhciBkaWRNb3VudFJlZiA9IHVzZVJlZihmYWxzZSk7XG4gICAgLy8gZXZlcnkgdGltZSB0aGUga2V5IGNoYW5nZXMsIHdlIHJlc2V0IHRoZSBwYWdlIHNpemUgaWYgaXQncyBub3QgcGVyc2lzdGVkXG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRpZE1vdW50UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmICghcGVyc2lzdFNpemUpIHtcbiAgICAgICAgICAgICAgICBwYWdlQ291bnRSZWYuY3VycmVudCA9IGluaXRpYWxTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGlkTW91bnRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9LCBbZmlyc3RQYWdlS2V5XSk7XG4gICAgLy8gYWN0dWFsIHN3ciBvZiBhbGwgcGFnZXNcbiAgICB2YXIgc3dyID0gdXNlU1dSKGZpcnN0UGFnZUtleSA/IFsnbWFueScsIGZpcnN0UGFnZUtleV0gOiBudWxsLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgb3JpZ2luYWxEYXRhLCBmb3JjZSwgZGF0YSwgcHJldmlvdXNQYWdlRGF0YSwgaSwgX2IsIHBhZ2VLZXksIHBhZ2VBcmdzLCBwYWdlRGF0YSwgc2hvdWxkUmV2YWxpZGF0ZVBhZ2U7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gY2FjaGUuZ2V0KGNvbnRleHRDYWNoZUtleSkgfHwge30sIG9yaWdpbmFsRGF0YSA9IF9hLm9yaWdpbmFsRGF0YSwgZm9yY2UgPSBfYS5mb3JjZTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1BhZ2VEYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGkgPCBwYWdlQ291bnRSZWYuY3VycmVudCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xuICAgICAgICAgICAgICAgICAgICBfYiA9IGNhY2hlLnNlcmlhbGl6ZUtleShnZXRLZXkoaSwgcHJldmlvdXNQYWdlRGF0YSkpLCBwYWdlS2V5ID0gX2JbMF0sIHBhZ2VBcmdzID0gX2JbMV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFnZUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGFnZUtleSBpcyBmYWxzeSwgc3RvcCBmZXRjaGluZyBuZXh0IHBhZ2VzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYWdlRGF0YSA9IGNhY2hlLmdldChwYWdlS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkUmV2YWxpZGF0ZVBhZ2UgPSByZXZhbGlkYXRlQWxsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JjZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBmb3JjZSA9PT0gJ3VuZGVmaW5lZCcgJiYgaSA9PT0gMCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChvcmlnaW5hbERhdGEgJiYgIWNvbmZpZy5jb21wYXJlKG9yaWdpbmFsRGF0YVtpXSwgcGFnZURhdGEpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHBhZ2VEYXRhID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzaG91bGRSZXZhbGlkYXRlUGFnZSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNl07XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHBhZ2VBcmdzICE9PSBudWxsKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGZuLmFwcGx5KHZvaWQgMCwgcGFnZUFyZ3MpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHBhZ2VEYXRhID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZuKHBhZ2VLZXkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHBhZ2VEYXRhID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDU7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBjYWNoZS5zZXQocGFnZUtleSwgcGFnZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDY7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2gocGFnZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1BhZ2VEYXRhID0gcGFnZURhdGE7XG4gICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gNztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICAvLyBvbmNlIHdlIGV4ZWN1dGVkIHRoZSBkYXRhIGZldGNoaW5nIGJhc2VkIG9uIHRoZSBjb250ZXh0LCBjbGVhciB0aGUgY29udGV4dFxuICAgICAgICAgICAgICAgICAgICBjYWNoZS5kZWxldGUoY29udGV4dENhY2hlS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBkYXRhXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBkYXRhXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7IH0sIGV4dHJhQ29uZmlnKTtcbiAgICAvLyBrZWVwIHRoZSBkYXRhIGluc2lkZSBhIHJlZlxuICAgIHZhciBkYXRhUmVmID0gdXNlUmVmKHN3ci5kYXRhKTtcbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICBkYXRhUmVmLmN1cnJlbnQgPSBzd3IuZGF0YTtcbiAgICB9LCBbc3dyLmRhdGFdKTtcbiAgICB2YXIgbXV0YXRlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGRhdGEsIHNob3VsZFJldmFsaWRhdGUpIHtcbiAgICAgICAgaWYgKHNob3VsZFJldmFsaWRhdGUgPT09IHZvaWQgMCkgeyBzaG91bGRSZXZhbGlkYXRlID0gdHJ1ZTsgfVxuICAgICAgICBpZiAoc2hvdWxkUmV2YWxpZGF0ZSAmJiB0eXBlb2YgZGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIC8vIHdlIG9ubHkgcmV2YWxpZGF0ZSB0aGUgcGFnZXMgdGhhdCBhcmUgY2hhbmdlZFxuICAgICAgICAgICAgdmFyIG9yaWdpbmFsRGF0YSA9IGRhdGFSZWYuY3VycmVudDtcbiAgICAgICAgICAgIGNhY2hlLnNldChjb250ZXh0Q2FjaGVLZXksIHsgb3JpZ2luYWxEYXRhOiBvcmlnaW5hbERhdGEsIGZvcmNlOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgICAgICAgICAvLyBjYWxsaW5nIGBtdXRhdGUoKWAsIHdlIHJldmFsaWRhdGUgYWxsIHBhZ2VzXG4gICAgICAgICAgICBjYWNoZS5zZXQoY29udGV4dENhY2hlS2V5LCB7IGZvcmNlOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzd3IubXV0YXRlKGRhdGEsIHNob3VsZFJldmFsaWRhdGUpO1xuICAgIH0sIFtzd3IubXV0YXRlLCBjb250ZXh0Q2FjaGVLZXldKTtcbiAgICAvLyBleHRlbmQgdGhlIFNXUiBBUElcbiAgICB2YXIgc2l6ZSA9IHBhZ2VDb3VudFJlZi5jdXJyZW50O1xuICAgIHZhciBzZXRTaXplID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGFyZykge1xuICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcGFnZUNvdW50UmVmLmN1cnJlbnQgPSBhcmcocGFnZUNvdW50UmVmLmN1cnJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBwYWdlQ291bnRSZWYuY3VycmVudCA9IGFyZztcbiAgICAgICAgfVxuICAgICAgICBjYWNoZS5zZXQocGFnZUNvdW50Q2FjaGVLZXksIHBhZ2VDb3VudFJlZi5jdXJyZW50KTtcbiAgICAgICAgcmVyZW5kZXIoZnVuY3Rpb24gKHYpIHsgcmV0dXJuICF2OyB9KTtcbiAgICAgICAgcmV0dXJuIG11dGF0ZShmdW5jdGlvbiAodikgeyByZXR1cm4gdjsgfSk7XG4gICAgfSwgW211dGF0ZSwgcGFnZUNvdW50Q2FjaGVLZXldKTtcbiAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHN3ciksIHsgbXV0YXRlOiBtdXRhdGUsXG4gICAgICAgIHNpemU6IHNpemUsXG4gICAgICAgIHNldFNpemU6IHNldFNpemUgfSk7XG59XG5leHBvcnQgeyB1c2VTV1JJbmZpbml0ZSB9O1xuIiwiZXhwb3J0ICogZnJvbSAnLi91c2Utc3dyJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgdXNlU1dSIH0gZnJvbSAnLi91c2Utc3dyJztcbmV4cG9ydCB7IHVzZVNXUkluZmluaXRlIH0gZnJvbSAnLi91c2Utc3dyLWluZmluaXRlJztcbmV4cG9ydCB7IGNhY2hlIH0gZnJvbSAnLi9jb25maWcnO1xuZXhwb3J0IGRlZmF1bHQgdXNlU1dSO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==